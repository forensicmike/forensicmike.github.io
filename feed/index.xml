<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>forensicmike1</title>
	<atom:link href="/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>#DFIR &#124; #RE &#124; #OtherGeekThings =&#62; Views expressed are my own.</description>
	<lastBuildDate>Sun, 22 Aug 2021 14:40:21 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.6</generator>
	<item>
		<title>Taking a gander at iOS apps on an M1 Mac</title>
		<link>/2021/05/25/taking-a-look-at-ios-apps-on-an-m1-mac/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=taking-a-look-at-ios-apps-on-an-m1-mac</link>
					<comments>/2021/05/25/taking-a-look-at-ios-apps-on-an-m1-mac/#respond</comments>
		
		<dc:creator><![CDATA[Mike Williamson]]></dc:creator>
		<pubDate>Tue, 25 May 2021 20:47:39 +0000</pubDate>
				<category><![CDATA[DFIR]]></category>
		<category><![CDATA[Mac]]></category>
		<category><![CDATA[Reverse Engineering]]></category>
		<guid isPermaLink="false">https://3.88.229.156/?p=570</guid>

					<description><![CDATA[<p>I wanted to share some initial research I did over the rainy long weekend. I recently got access to a MacBook Pro with the M1 chip and so naturally I wanted to take a look at how running iOS apps natively on macOS works, where the app data ends up on the HDD, and of [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2021/05/25/taking-a-look-at-ios-apps-on-an-m1-mac/">Taking a gander at iOS apps on an M1 Mac</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>I wanted to share some initial research I did over the rainy long weekend. I recently got access to a MacBook Pro with the M1 chip and so naturally I wanted to take a look at how running iOS apps natively on macOS works, where the app data ends up on the HDD, and of course, to see if Frida works on it or not. <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p>Given the large number of iOS apps that you can presently install via the App Store, it&#8217;s definitely conceivable that we might start seeing instances of this on Mac extractions, so I thought it might be helpful to have a frame of reference for where iOS app data is located.</p>



<p>For this research, I decided to install Private Photo Vault (which continues to bring a ton of traffic to my site to this day haha), but I suspect the story will be similar for other apps.</p>



<p>First things first, let&#8217;s find PPV on the App Store. One note is that you need to click on the iPhone &amp; iPad Apps filter, which seems obvious now but didn&#8217;t immediately jump out when I started this before my coffee activated.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="625" src="http://3.88.229.156/wp-content/uploads/2021/05/image-1024x625.png" alt="" class="wp-image-571" srcset="/wp-content/uploads/2021/05/image-1024x625.png 1024w, /wp-content/uploads/2021/05/image-300x183.png 300w, /wp-content/uploads/2021/05/image-768x469.png 768w, /wp-content/uploads/2021/05/image-1536x938.png 1536w, /wp-content/uploads/2021/05/image-2048x1250.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>Okay great, it&#8217;s installed. It shows up on the LaunchPad just like any other installed app, neat.</p>



<figure class="wp-block-image size-large is-resized"><img loading="lazy" src="http://3.88.229.156/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-1.59.55-PM.png" alt="" class="wp-image-575" width="337" height="222" srcset="/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-1.59.55-PM.png 718w, /wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-1.59.55-PM-300x198.png 300w" sizes="(max-width: 337px) 100vw, 337px" /></figure>



<p>OK great, let&#8217;s launch the app and set it up, and take a photo. The app seamlessly integrates with the MBP&#8217;s front facing camera (which still produces pretty awful looking pictures compared to iPhone).</p>



<p>First I&#8217;ll check if Frida sees the process by running</p>



<p> <code>frida-ps | grep Vault</code>. </p>



<p>We see two processes of interest including Photo Vault and Keychain (Photo Vault):</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="297" src="http://3.88.229.156/wp-content/uploads/2021/05/image-2-1024x297.png" alt="" class="wp-image-573" srcset="/wp-content/uploads/2021/05/image-2-1024x297.png 1024w, /wp-content/uploads/2021/05/image-2-300x87.png 300w, /wp-content/uploads/2021/05/image-2-768x223.png 768w, /wp-content/uploads/2021/05/image-2-1536x446.png 1536w, /wp-content/uploads/2021/05/image-2-2048x595.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>More on my adventures with frida in a moment, but let&#8217;s take a moment to search for the data. With the help of the find command (and knowing by heart at this point what files and folders PPV generally leaves in the filesystem on iDevices), I located the data for the app at:</p>



<p><code>/Users/(name)/Library/Containers/(Installation GUID)/Data/Library</code></p>



<p>As seen in the below screenshot, within this folder we have similar contents as PPV on iOS, except with a ton of other folders too!</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="721" src="http://3.88.229.156/wp-content/uploads/2021/05/image-3-1024x721.png" alt="" class="wp-image-574" srcset="/wp-content/uploads/2021/05/image-3-1024x721.png 1024w, /wp-content/uploads/2021/05/image-3-300x211.png 300w, /wp-content/uploads/2021/05/image-3-768x541.png 768w, /wp-content/uploads/2021/05/image-3.png 1142w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>So what is going on here? If we do an <code>ls -l</code> it becomes clearer:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="864" src="http://3.88.229.156/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-2.05.38-PM-1024x864.png" alt="" class="wp-image-576" srcset="/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-2.05.38-PM-1024x864.png 1024w, /wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-2.05.38-PM-300x253.png 300w, /wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-2.05.38-PM-768x648.png 768w, /wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-2.05.38-PM.png 1502w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>Any of the items starting with <code>l</code> are symlinks! In fact, if we step up a folder to /Data we can see Desktop, Downloads etc. and all of the folders we expect to see in <code>~/</code> for our user, are here again, as symlinks.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="412" src="http://3.88.229.156/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-1.59.22-PM-1024x412.png" alt="" class="wp-image-577" srcset="/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-1.59.22-PM-1024x412.png 1024w, /wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-1.59.22-PM-300x121.png 300w, /wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-1.59.22-PM-768x309.png 768w, /wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-1.59.22-PM-1536x618.png 1536w, /wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-1.59.22-PM.png 1600w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>I&#8217;m sure there&#8217;s a good reason for this, but it&#8217;s something to be aware of when traversing these app directories as it can spam us pretty bad when using the <code>find</code> or <code>ls</code> command <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>



<p>Fortunately, when we create a tar file with the contents of the Data directory, it does not <strong>fully </strong>traverse the symlinks. Here I did: <code>tar cvf ~/Desktop/ppv_macos.tar .</code></p>



<figure class="wp-block-image size-large"><img loading="lazy" width="949" height="1024" src="http://3.88.229.156/wp-content/uploads/2021/05/image-4-949x1024.png" alt="" class="wp-image-578" srcset="/wp-content/uploads/2021/05/image-4-949x1024.png 949w, /wp-content/uploads/2021/05/image-4-278x300.png 278w, /wp-content/uploads/2021/05/image-4-768x829.png 768w, /wp-content/uploads/2021/05/image-4.png 1184w" sizes="(max-width: 949px) 100vw, 949px" /></figure>



<p>And as you can see, the symlinks are still present but listed as ~20 byte files instead of directories.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="967" height="951" src="http://3.88.229.156/wp-content/uploads/2021/05/image-5.png" alt="" class="wp-image-579" srcset="/wp-content/uploads/2021/05/image-5.png 967w, /wp-content/uploads/2021/05/image-5-300x295.png 300w, /wp-content/uploads/2021/05/image-5-768x755.png 768w" sizes="(max-width: 967px) 100vw, 967px" /></figure>



<p>And 7-zip considers them <em>dangerous</em> and doesn&#8217;t bother to create them when you do a full extraction:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="601" height="505" src="http://3.88.229.156/wp-content/uploads/2021/05/image-6.png" alt="" class="wp-image-580" srcset="/wp-content/uploads/2021/05/image-6.png 601w, /wp-content/uploads/2021/05/image-6-300x252.png 300w" sizes="(max-width: 601px) 100vw, 601px" /></figure>



<h2>Frida</h2>



<p>I now wanted to see if I could attach with Frida. First attempt, I got an error saying my user account didn&#8217;t have permissions to attach. I remembered seeing this before, and after googling I found it indeed it had to do with <a href="https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection" target="_blank" rel="noreferrer noopener">SIP</a> (System Integrity Protection) being enabled. To disable, one must shutdown and then restart into recovery. Note that on M1 Macs, instead of holding Cmd+R and booting, you actually just hold down the power button until the boot options screen appears. After booting to recovery a good ol&#8217; <code>csrutil disable</code> from the terminal still does the trick.</p>



<p>After rebooting, I went to startup PPV again and was met with this sad message:</p>



<figure class="wp-block-image size-large is-resized"><img loading="lazy" src="http://3.88.229.156/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-2.00.04-PM.png" alt="" class="wp-image-581" width="310" height="301" srcset="/wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-2.00.04-PM.png 612w, /wp-content/uploads/2021/05/Screen-Shot-2021-05-25-at-2.00.04-PM-300x292.png 300w" sizes="(max-width: 310px) 100vw, 310px" /></figure>



<p>So, it looks like some additional work will be required in order to deal with this. I did find <a href="https://twitter.com/SparkZheng/status/1334808131981910019" target="_blank" rel="noreferrer noopener">this tweet</a> from <a href="https://twitter.com/SparkZheng" target="_blank" rel="noreferrer noopener">@SparkZheng</a> though, so looks like it is possible with resigning?, but I haven&#8217;t had time to go further just yet.</p>



<figure class="wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter"><div class="wp-block-embed__wrapper">
<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">You can use frida or lldb to hook or debug iOS apps on MacBook with M1 chip. hits: disable SIP and resign apps. <a href="https://t.co/JhDmmJ2IUj">pic.twitter.com/JhDmmJ2IUj</a></p>&mdash; Min(Spark) Zheng (@SparkZheng) <a href="https://twitter.com/SparkZheng/status/1334808131981910019?ref_src=twsrc%5Etfw">December 4, 2020</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div></figure>



<p>Notwithstanding that, if you don&#8217;t have yourself a test iDevice but do have an M1 Mac and are interested in accessing filesystem artifacts without having to do repeated extractions, this could definitely be a timesaver.</p>
<p>The post <a rel="nofollow" href="/2021/05/25/taking-a-look-at-ios-apps-on-an-m1-mac/">Taking a gander at iOS apps on an M1 Mac</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2021/05/25/taking-a-look-at-ios-apps-on-an-m1-mac/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Analysis of the ABTraceTogether app (iOS)</title>
		<link>/2020/05/01/analysis-of-the-abtracetogether-app-ios/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=analysis-of-the-abtracetogether-app-ios</link>
					<comments>/2020/05/01/analysis-of-the-abtracetogether-app-ios/#comments</comments>
		
		<dc:creator><![CDATA[Mike Williamson]]></dc:creator>
		<pubDate>Sat, 02 May 2020 03:58:53 +0000</pubDate>
				<category><![CDATA[DFIR]]></category>
		<category><![CDATA[Mobile Forensics]]></category>
		<category><![CDATA[Reverse Engineering]]></category>
		<guid isPermaLink="false">https://3.88.229.156/?p=495</guid>

					<description><![CDATA[<p>I decided to have a look at the ABTraceTogether contract tracing app released by the Alberta Government today (May 1 2020) and blog about my findings. There&#8217;s potential for conspiracy theories and disinformation to run rampant for an app like this, so I wanted to have a look for myself and see how it actually [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2020/05/01/analysis-of-the-abtracetogether-app-ios/">Analysis of the ABTraceTogether app (iOS)</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>I decided to have a look at the ABTraceTogether contract tracing app released by the Alberta Government today (May 1 2020) and blog about my findings. </p>



<p>There&#8217;s potential for conspiracy theories and disinformation to run rampant for an app like this, so I wanted to have a look for myself and see how it actually works.</p>



<p>I was also curious to see if there might be any forensically valuable information found in the app&#8217;s databases and files.</p>



<p>I&#8217;ll start with my general observations and provide a more detailed explanation afterwards.</p>



<p class="has-text-color has-vivid-green-cyan-color">As I&#8217;ve added a couple of updates today (May 2) &#8211; any new info is marked in green.</p>



<h3>Observations</h3>



<p>The registration process does not prompt you for your name, email, or any other PII (personally identifiable information) except for one: you must register using valid phone number, which will be used to contact you in the event you come into contact with someone who contracted the virus.</p>



<p>The app is built on <a rel="noreferrer noopener" aria-label="BlueTrace (opens in a new tab)" href="https://bluetrace.io/" target="_blank">BlueTrace</a>/<a rel="noreferrer noopener" aria-label="OpenTrace (opens in a new tab)" href="https://github.com/opentrace-community/opentrace-ios" target="_blank">OpenTrace</a>, which is open source and has published <a rel="noreferrer noopener" aria-label="a whitepaper (opens in a new tab)" href="https://bluetrace.io/static/bluetrace_whitepaper-938063656596c104632def383eb33b3c.pdf" target="_blank">a whitepaper</a> that explains its methodology in great detail. It was first used in the <a rel="noreferrer noopener" aria-label="TraceTogether (opens in a new tab)" href="https://www.tracetogether.gov.sg/" target="_blank">TraceTogether</a> app in Singapore beginning in March 2020. <br><br>Encounters between devices are only tracked locally and must be uploaded to AHS manually (and <em>voluntarily</em>) if they contact you and request you to do so. In my tests the app did not communicate with the server any more than necessary (such as to retrieve encrypted forward-dated Temp IDs).<br><br>Analysis of the tracing database did not net any information of significant forensic value. Encounters between devices are logged however the only information available is: 1) the other device&#8217;s make and model, 2) the host device&#8217;s make and model, 3) the time of the interaction, 4) indicators of how close the device came such as received signal strength indicator (RSSI). The remaining data is encrypted and not accessible without keys that AHS maintains.</p>



<p>In the BlueTrace design, the server (and its security) is of utmost importance. While out of scope for this article, I think it is worth noting that given all encryption keys, IDs, tempIDs, and registered phone numbers are stored on the server, any sort of poorly configured or insecure endpoints could pose the largest risk (such as in the event of a data breach).</p>



<p>Overall, the app appears to deliver on its privacy promises. I did not find much of potential forensic value in artifacts from the app&#8217;s sandbox.  The app&#8217;s biggest failing, I think, is the requirement (iOS only) to keep the phone <strong>unlocked with the screen active </strong>at all times. I just can&#8217;t see people doing  this &#8211; they will be on their phones, which will mean this app isn&#8217;t in  the foreground and thus not working. I do acknowledge this limitation is not the fault of the developer, but rather the restrictiveness of iOS. Hopefully future development, such as with the recently released Apple/Google <a rel="noreferrer noopener" aria-label="contact tracing API (opens in a new tab)" href="https://www.apple.com/covid19/contacttracing" target="_blank">contact tracing API</a>, the need for leaving the device unlocked can be eliminated.</p>



<p class="has-text-color has-vivid-green-cyan-color"><strong>UPDATE 2020-05-02</strong>: As pointed out by user Chris Thompson (@yegct), another curiosity is that the OpenTrace project seems to be using a GPL license, which would be potentially problematic as this license dictates anything it ships with be licensed under GPL as well. I found <a rel="noreferrer noopener" aria-label="this github issue (opens in a new tab)" href="https://github.com/opentrace-community/opentrace-ios/issues/2" target="_blank">this github issue</a> on the repo also questioning the same.</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/05/image-4.png"><img loading="lazy" width="988" height="246" src="http://3.88.229.156/wp-content/uploads/2020/05/image-4.png" alt="" class="wp-image-538" srcset="/wp-content/uploads/2020/05/image-4.png 988w, /wp-content/uploads/2020/05/image-4-300x75.png 300w, /wp-content/uploads/2020/05/image-4-768x191.png 768w" sizes="(max-width: 988px) 100vw, 988px" /></a></figure>



<h3>Static analysis</h3>



<p>I obtained a copy of the app (version 1.0.0) on my test iPhone 6S running iOS 13.2.2. I used <a rel="noreferrer noopener" aria-label="frida  (opens in a new tab)" href="https://www.frida.re/" target="_blank">frida </a>to obtain a copy of the IPA with a decrypted app binary and then used Hopper (macOS) to examine it. </p>



<p>It appears to be a small, straightforward app with not a lot of code to examine. It&#8217;s written in Swift which makes the static analysis a bit less intuitive.</p>



<p>The app uses a library called <a rel="noreferrer noopener" aria-label="OpenTrace (opens in a new tab)" href="https://github.com/opentrace-community/opentrace-ios" target="_blank">OpenTrace</a> (which is an implementation of <a rel="noreferrer noopener" aria-label="BlueTrace (opens in a new tab)" href="https://bluetrace.io/" target="_blank">BlueTrace</a>). BlueTrace has published <a rel="noreferrer noopener" aria-label="a whitepaper (opens in a new tab)" href="https://bluetrace.io/static/bluetrace_whitepaper-938063656596c104632def383eb33b3c.pdf" target="_blank">a whitepaper</a> explaining the technical methodology and, I feel gives very solid explanations for why things are the way they are. </p>



<p class="has-text-color has-vivid-green-cyan-color"><strong>UPDATE 2020-05-02</strong>: Just a minor clarification on the above paragraph &#8211; rather than consuming any pre-compiled library or framework, it appears that the OpenTrace code has been integrated directly with the ABTraceTogether codebase under the ABTraceTogether class. This does not mean there aren&#8217;t variations. However, I did test several strings from debug messages found in the OpenTrace code and located all of them unmodified in the ABTraceTogetherApp binary.</p>



<p><strong><span style="text-decoration: underline;">Info.plist</span></strong></p>



<p>The app&#8217;s Info.plist contains some interesting info, such as developer specified descriptions for permissions potentially requested.</p>



<p><strong>NSBluetoothAlwaysUsageDescription &#8211; </strong>ABTraceTogether exchanges Bluetooth signals with nearby phones running the same app. These signals contain an anonymised ID, which is encrypted and changes continually to ensure your privacy. </p>



<p><strong>NSCameraUsageDescription</strong> &#8211; Grant ABTraceTogether permissions to access your camera if you would like to upload a photo as part of a support request</p>



<p><strong>NSPhotoLibraryUsageDescription</strong> &#8211; Grant ABTraceTogether permissions to access your photo library if you would like to upload a photo as part of a support request</p>



<p>The plist also specifies that at a minimum, iOS 13 is required. This requirement was interesting to me because the app does not use the new Apple/Google API. It could limit the ability for people using older hardware that can&#8217;t run iOS 13 to access it. </p>



<p>Overall, nothing super surprising here. The camera/photo gallery permissions didn&#8217;t come up in any of my tests.</p>



<hr class="wp-block-separator"/>



<p>Nothing else of note resulting from static analysis. Future research -&gt; to obtain a copy of the Android version and review it as well.</p>



<h3>Forensic value of filesystem artifacts</h3>



<p>The database tracer.sqlite, located in Library/Application Support/, and specifically the table ZENCOUNTER is where interactions between nearby devices are logged. </p>



<p>To generate a test encounter, I installed the app on my own iPhone (in addition to my research phone), and with the app open, brought the devices fairly close together.</p>



<p>This test showed up in table ZENCOUNTER as follows:</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/05/image-1.png"><img loading="lazy" width="1024" height="174" src="http://3.88.229.156/wp-content/uploads/2020/05/image-1-1024x174.png" alt="" class="wp-image-498" srcset="/wp-content/uploads/2020/05/image-1-1024x174.png 1024w, /wp-content/uploads/2020/05/image-1-300x51.png 300w, /wp-content/uploads/2020/05/image-1-768x130.png 768w, /wp-content/uploads/2020/05/image-1.png 1095w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-table"><table><thead><tr><th class="has-text-align-center" data-align="center">Column</th><th>Description</th></tr></thead><tbody><tr><td class="has-text-align-center" data-align="center">ZV</td><td>The version of BlueTrace protocol the other device is using (currently 2)</td></tr><tr><td class="has-text-align-center" data-align="center">ZRSSI</td><td>The received signal strength indicator (RSSI) &#8211; can be used to assess how close the devices actually got. </td></tr><tr><td class="has-text-align-center" data-align="center">ZTIMESTAMP</td><td>When the encounter took place.</td></tr><tr><td class="has-text-align-center" data-align="center">ZTXPOWER</td><td>Transmission power? Always 0.0, 7.0 or NULL in my database so far. </td></tr><tr><td class="has-text-align-center" data-align="center">ZMODELC</td><td>A device make and model. Can be the other device or our device. C is believed to refer to &#8220;Central&#8221;. See <a rel="noreferrer noopener" aria-label="this link (opens in a new tab)" href="https://github.com/opentrace-community/opentrace-ios/blob/473b436a7287fffb9884f81ed00cbd738dbcbbcd/OpenTrace/Bluetrace/Structs/EncounterRecord.swift#L25" target="_blank">this link</a> for more on the OpenTrace github for Encounter Record.</td></tr><tr><td class="has-text-align-center" data-align="center">ZMODELP</td><td> A device make and model. Can be the other device or our device. C is believed to refer to &#8220;Peripheral&#8221;.  See <a rel="noreferrer noopener" aria-label="this link (opens in a new tab)" href="https://github.com/opentrace-community/opentrace-ios/blob/473b436a7287fffb9884f81ed00cbd738dbcbbcd/OpenTrace/Bluetrace/Structs/EncounterRecord.swift#L25" target="_blank">this link</a>  for more on the OpenTrace github for Encounter Record .</td></tr><tr><td class="has-text-align-center" data-align="center">ZMSG</td><td>An encrypted payload, base 64 encoded including IV/Auth Tag. (84 bytes)</td></tr><tr><td class="has-text-align-center" data-align="center">ZORG</td><td>The organization code indicating the country / health authority with which the peripheral is enrolled.</td></tr></tbody></table></figure>



<p>The ZMSG structure is described in the whitepaper as follows:</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/05/image-2.png"><img loading="lazy" width="645" height="247" src="http://3.88.229.156/wp-content/uploads/2020/05/image-2.png" alt="" class="wp-image-499" srcset="/wp-content/uploads/2020/05/image-2.png 645w, /wp-content/uploads/2020/05/image-2-300x115.png 300w" sizes="(max-width: 645px) 100vw, 645px" /></a></figure>



<p>(Note the typo of AED which should read AES).</p>



<p>The forward-dated tempIDs were found in a file under Library\Caches\ca.ab.gov.ahs.contacttracing\fsCachedData\{GUID} . The contents of the file is shown here but redacted slightly to not show the full tokens:</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/05/image-3.png"><img loading="lazy" width="1024" height="640" src="http://3.88.229.156/wp-content/uploads/2020/05/image-3-1024x640.png" alt="" class="wp-image-500" srcset="/wp-content/uploads/2020/05/image-3-1024x640.png 1024w, /wp-content/uploads/2020/05/image-3-300x188.png 300w, /wp-content/uploads/2020/05/image-3-768x480.png 768w, /wp-content/uploads/2020/05/image-3.png 1140w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<h3>Future work</h3>



<p>One remaining bit of work on iOS is to examine the iOS keychain &#8211; there&#8217;s a bunch of entries in there and I&#8217;m curious what they could be used for given temp ID token generation takes place serverside.</p>
<p>The post <a rel="nofollow" href="/2020/05/01/analysis-of-the-abtracetogether-app-ios/">Analysis of the ABTraceTogether app (iOS)</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2020/05/01/analysis-of-the-abtracetogether-app-ios/feed/</wfw:commentRss>
			<slash:comments>6</slash:comments>
		
		
			</item>
		<item>
		<title>Examiner-coder-types: Learnin&#8217;git can make you a better developer</title>
		<link>/2020/02/29/examiner-coder-types-learningit-can-make-you-a-better-developer/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=examiner-coder-types-learningit-can-make-you-a-better-developer</link>
					<comments>/2020/02/29/examiner-coder-types-learningit-can-make-you-a-better-developer/#respond</comments>
		
		<dc:creator><![CDATA[Mike Williamson]]></dc:creator>
		<pubDate>Sat, 29 Feb 2020 18:37:46 +0000</pubDate>
				<category><![CDATA[DFIR]]></category>
		<category><![CDATA[Forensic Coding]]></category>
		<category><![CDATA[Git Good]]></category>
		<guid isPermaLink="false">https://3.88.229.156/?p=444</guid>

					<description><![CDATA[<p>I decided to write an article about Git and Github. Why? I&#8217;ve been exposed to Git a lot since I started working for a software company. Now, I&#8217;m wishing I could go back in time and have used it a lot more&#8230; even for projects I had no intention of ever releasing to the public [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2020/02/29/examiner-coder-types-learningit-can-make-you-a-better-developer/">Examiner-coder-types: Learnin&#8217;git can make you a better developer</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>I decided to write an article about Git and Github. Why? I&#8217;ve been exposed to Git a lot since I started working for a software company. Now, I&#8217;m wishing I could go back in time and have used it a lot more&#8230; even for projects I had no intention of ever releasing to the public (e.g. most of them!). This article is meant to speak directly to those just like &#8220;pre-software company me&#8221; &#8212; who might be missing out on the significant advantages of using Git. Ask yourself the following:</p>



<ul><li>Are you self-taught in most of the programming you know?</li><li>Have you ever made a change to your project and subsequently wished you could undo said change as it created unforeseen bug(s)?</li><li>Have you tried to use git before and been frustrated with some of the very first steps you need to take, such as setting up a new repo from an existing project?</li><li>Do you keep all of your code in a cloud drive like Dropbox or Google Drive to ensure you have consistent code backups?</li><li>Have you ever struggled to work collaboratively with another developer on a project?</li><li>Are you aware of git, and the fact that it is popular and supposedly useful, but been overwhelmed by the initial learning curve?</li></ul>



<p>If you identified with any of the above, this article might help you. If you already know why Git / Github are amazing, you could still benefit from some of the tips below. This article isn&#8217;t so much a &#8220;git 101&#8221; as there are <a href="https://www.learnenough.com/git-tutorial/getting_started" target="_blank" rel="noreferrer noopener" aria-label="lots of great resources (opens in a new tab)">lots of great resources</a> out there for that. I may write more on this subject in future though!</p>



<h2>Disclaimer</h2>



<p>I am not a git master. I am a git neophyte, and that&#8217;s okay. You don&#8217;t need mastery to reap the benefits. Since I started working at a software company, I&#8217;ve met some true git wizards, and have benefited greatly from their willingness to impart wisdom. </p>



<p>I&#8217;m only just getting started in my Git-learning journey, and I do mean journey &#8212; it&#8217;s a slough that can honestly be pretty frustrating. (Out of those times of frustration often come some of the biggest Git-epiphanies). </p>



<p>Despite my relative newness, I feel strongly enough about the benefits to write a post because I think there are a lot of folks out there that stand to benefit greatly from beginning to use this technology.</p>



<p>If you disagree with any of the advice I&#8217;ve laid out, think I should add to this article, or just want to chat Git &#8211; feel free to drop a comment or connect with me on Twitter/Discord.</p>



<h2>Just /some/ of the advantages&#8230;</h2>



<ul><li>Redundant, cloud-based backups of <span style="text-decoration: underline;">JUST YOUR SOURCE CODE</span>. Github now offers private repositories for free. This is SO much better than storing your entire code folder on Dropbox / GDrive / etc.</li><li>The ability to selectively roll-back changes or track specific changes over time.</li><li>Makes collaborative coding much easier if it ends up being a project that involves multiple developers.</li><li>Increases the likelihood of people trying out your product (vs. downloading an installer from a random website authored by someone they don&#8217;t know or trust)</li><li>If you have future aspirations of working at a software company, particularly in any kind of development role, pre-existing fluency in Git will be a huge asset.</li></ul>



<p>While it does take time to learn, and is a skill that must be maintained, you will benefit greatly as a developer by learning it, and you don&#8217;t need to be a master to use it right away.</p>



<h2>Setup a repo from an already existing project</h2>



<p>If you&#8217;re like me, you may find that you have often already begun writing code before it ever occurred to you to setup a github repo. There are in-built features in Visual Studio, but I&#8217;ve always struggled to make them work with a project that already has code in it. All is not lost. </p>



<p>There&#8217;s a pretty good write-up here:  <a rel="noreferrer noopener" aria-label="https://help.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line  (opens in a new tab)" href="https://help.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line" target="_blank">https://help.github.com/en/github/importing-your-projects-to-github/adding-an-existing-project-to-github-using-the-command-line </a></p>



<p>But if the inner-millennial in you can&#8217;t bear to read the above tutorial start-to-finish, please at a minimum keep in mind the following KEY POINT:</p>



<p>When creating your repo on Github, <strong>DO NOT create a readme</strong> <strong>or set a license</strong>. You want an entirely empty repo. E.g.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="762" height="682" src="http://3.88.229.156/wp-content/uploads/2020/02/image-3.png" alt="" class="wp-image-454" srcset="/wp-content/uploads/2020/02/image-3.png 762w, /wp-content/uploads/2020/02/image-3-300x269.png 300w" sizes="(max-width: 762px) 100vw, 762px" /></figure>



<p>As long as you do that, things will go smoothly in the tutorial. I&#8217;d also recommend running a &#8220;git status&#8221; command before you proceed with your first commit, and ensure you don&#8217;t see &#8220;bin/&#8221; or other such folders. If you do, read the next section first.</p>



<h2>Before doing your initial commit, create a .gitignore</h2>



<p>.gitignore is a file that lists off what should and shouldn&#8217;t go into your commit. In general, it is considered bad practice to include stuff that gets generated by your compiler in your commits. Another no-no would be including dependencies like NuGet packages as this will massively inflate the size of your repository unnecessarily.</p>



<p>Of course, you are welcome to research what a good .gitignore looks like, but I would personally recommend checking out <a rel="noreferrer noopener" aria-label="Gitignore.io (opens in a new tab)" href="https://gitignore.io/" target="_blank">Gitignore.io</a> . This site provides templates depending on the type of project you&#8217;re working on. For instance, if you are working on a C# project you can search for CSharp and get yourself a ready to go .gitignore:</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/02/image-2.png"><img loading="lazy" width="1024" height="466" src="http://3.88.229.156/wp-content/uploads/2020/02/image-2-1024x466.png" alt="" class="wp-image-452" srcset="/wp-content/uploads/2020/02/image-2-1024x466.png 1024w, /wp-content/uploads/2020/02/image-2-300x137.png 300w, /wp-content/uploads/2020/02/image-2-768x349.png 768w, /wp-content/uploads/2020/02/image-2.png 1090w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<p>You can then save this as .gitignore in the root of your repository and the next time you run &#8220;git status&#8221; you&#8217;ll see that folders like:<br>bin/<br>obj/<br>.vs/<br>packages/</p>



<p>Are all absent from the change list. This means you will only be committing the important stuff to github and any would-be repo cloners will be pleased with you.</p>



<h2>Make a nice readme.md</h2>



<p>Readme.md is a critical piece of any good git repo. It is one of your only &#8216;sell me&#8217; pitches that will help your potential user decide whether or not to going to use this repo. It&#8217;s a great place to include things like:</p>



<ul><li>Explain what the product is today and where it came from. Also where you envision it in future. (Current &amp; Future features / roadmap)</li><li>Give direction on how you would like potential issues reported, or whether you are open to others submitting pull requests to your repository.</li><li>Provide links to pre-compiled binaries, if you decide to provide them.</li><li>Shout out any third party libraries you are using in your project.</li></ul>



<p>If your goal is to increase exposure, consider adding one or more screenshots to show off your product.</p>



<p>The &#8220;md&#8221; in readme.md stands for Markdown. Generous (but not gratuitous) use of markdown-based formatting will add polish to your repo. If you aren&#8217;t sure how to start with markdown, check out Github&#8217;s help page on the subject: <a rel="noreferrer noopener" aria-label="https://help.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax (opens in a new tab)" href="https://help.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax" target="_blank">https://help.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax</a></p>



<p>Tip: If you have setup your repo without a read me (such as when you are creating a repo from an existing project) you can add a readme off your main repo page:</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/02/image-4.png"><img loading="lazy" width="1013" height="70" src="http://3.88.229.156/wp-content/uploads/2020/02/image-4.png" alt="" class="wp-image-455" srcset="/wp-content/uploads/2020/02/image-4.png 1013w, /wp-content/uploads/2020/02/image-4-300x21.png 300w, /wp-content/uploads/2020/02/image-4-768x53.png 768w" sizes="(max-width: 1013px) 100vw, 1013px" /></a><figcaption>Click the green button</figcaption></figure>



<h2>Choose the right license</h2>



<p>If you&#8217;re planning to make your repo public at any point, it is important to not only specify a license, but also understand the implications of the license you ultimately select. Github has made this process easier by providing summaries of what each license can do. You might wonder which license is &#8220;the best&#8221; &#8211; and the truth is this really depends on what your project is intended to do.</p>



<p>I&#8217;m not an expert in OSS licensing by any stretch, but I definitely see the value in learning the differences between them depending on how widespread of use you anticipate your project seeing.</p>



<p>For example, if you are writing a new filesystem, codec, parser or algorithm which you envision software companies to potentially adopt the use of your code in the future. GPL licenses are designed to force anyone who uses the code to have their code be open source as well.</p>



<p>If on the other hand, you are writing a full fledged app and you&#8217;d like to avoid having your stuff plagiarized, GPL might be the perfect solution.</p>



<p>For additional reading on licenses, I recommend the following resources:</p>



<ul><li><a rel="noreferrer noopener" aria-label=" https://choosealicense.com/  (opens in a new tab)" href="https://choosealicense.com/" target="_blank">https://choosealicense.com/</a> (An objective resource from Github themselves)</li><li><a rel="noreferrer noopener" aria-label="https://www.freecodecamp.org/news/how-open-source-licenses-work-and-how-to-add-them-to-your-projects-34310c3cf94/ (opens in a new tab)" href="https://www.freecodecamp.org/news/how-open-source-licenses-work-and-how-to-add-them-to-your-projects-34310c3cf94/" target="_blank">https://www.freecodecamp.org/news/how-open-source-licenses-work-and-how-to-add-them-to-your-projects-34310c3cf94/</a></li></ul>



<h3>How to add a license after the repo is already setup</h3>



<p>You&#8217;ve setup your repo but now you need to add a license. How do we do this?</p>



<p>From your repository&#8217;s homepage on Github, click &#8220;Create New File&#8221;. As soon as you type in the word <em>license</em> you will see a button appear called &#8216;Choose a license template&#8217; &#8211; Click it!</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/02/image.png"><img loading="lazy" width="895" height="54" src="http://3.88.229.156/wp-content/uploads/2020/02/image.png" alt="" class="wp-image-446" srcset="/wp-content/uploads/2020/02/image.png 895w, /wp-content/uploads/2020/02/image-300x18.png 300w, /wp-content/uploads/2020/02/image-768x46.png 768w" sizes="(max-width: 895px) 100vw, 895px" /></a></figure>



<p>From here, you can select different licenses (the popular ones like Apache, GPL, and MIT are listed at the top) and review their differences. Once ready, click &#8216;Review and submit&#8217;.</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/02/image-1.png"><img loading="lazy" width="1024" height="200" src="http://3.88.229.156/wp-content/uploads/2020/02/image-1-1024x200.png" alt="" class="wp-image-447" srcset="/wp-content/uploads/2020/02/image-1-1024x200.png 1024w, /wp-content/uploads/2020/02/image-1-300x59.png 300w, /wp-content/uploads/2020/02/image-1-768x150.png 768w, /wp-content/uploads/2020/02/image-1-1536x300.png 1536w, /wp-content/uploads/2020/02/image-1.png 1891w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<h2>Finish every coding session with a commit or PR</h2>



<p>There are lots of different considerations here, such as whether your repo is public or private, whether you are collaborating with others, etc. The easiest of all is to just commit directly to master, which might be fine if it&#8217;s a private repo and you&#8217;re the only one contributing.</p>



<p>The point is, in order to maximize the &#8216;redundant backup&#8217; benefit, you need to make sure that any code you write exists somewhere other than your local machine. Don&#8217;t make the mistake of thinking that you should wait until you&#8217;ve finished an entire topic worth of code changes to push them. If you&#8217;ve made any code changes at all you wouldn&#8217;t want to have to re-write, make sure you propagate those changes to Github somehow. Remember: git commit isn&#8217;t git push. Running &#8220;git commit&#8221; won&#8217;t actually backup your changes to Github. Keep an eye on the output of your git commands as it&#8217;s usually pretty clear when your code has gone out to the internet:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="240" src="http://3.88.229.156/wp-content/uploads/2020/02/image-5-1024x240.png" alt="" class="wp-image-461" srcset="/wp-content/uploads/2020/02/image-5-1024x240.png 1024w, /wp-content/uploads/2020/02/image-5-300x70.png 300w, /wp-content/uploads/2020/02/image-5-768x180.png 768w, /wp-content/uploads/2020/02/image-5.png 1031w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2>Conclusion</h2>



<p>Git has a learning curve, and isn&#8217;t something you can master in a week. But the sooner you start getting exposed to it the better.</p>
<p>The post <a rel="nofollow" href="/2020/02/29/examiner-coder-types-learningit-can-make-you-a-better-developer/">Examiner-coder-types: Learnin&#8217;git can make you a better developer</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2020/02/29/examiner-coder-types-learningit-can-make-you-a-better-developer/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Spice up your forensic web reports with UI Frameworks</title>
		<link>/2020/01/03/spice-up-your-forensic-web-reports-with-ui-frameworks/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=spice-up-your-forensic-web-reports-with-ui-frameworks</link>
					<comments>/2020/01/03/spice-up-your-forensic-web-reports-with-ui-frameworks/#respond</comments>
		
		<dc:creator><![CDATA[Mike Williamson]]></dc:creator>
		<pubDate>Fri, 03 Jan 2020 19:07:21 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://3.88.229.156/?p=413</guid>

					<description><![CDATA[<p>I wanted to blog about a subject that&#8217;s come up in a number of converations recently- that is the idea of spicing up web reports spit out by scripts by making use of UI frameworks (which are generally free but may also have paid options if things get serious!). Like many examiners, I had some [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2020/01/03/spice-up-your-forensic-web-reports-with-ui-frameworks/">Spice up your forensic web reports with UI Frameworks</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>I wanted to blog about a subject that&#8217;s come up in a number of converations recently- that is the idea of spicing up web reports spit out by scripts by making use of UI frameworks (which are generally free but may also have paid options if things get serious!). Like many examiners, I had some familiarity with web development but hadn&#8217;t necessarily kept up with the trends over the years. It wasn&#8217;t until fairly recently that I finally invested the time in learning to build using Bootstrap, and I haven&#8217;t looked back.</p>



<p>While I still do prefer to write most of my HTML by hand in Notepad++, I discovered a profoundly easy to learn thing &#8211; UI frameworks. By simply adding in a couple of these resources into your project &#8211; we&#8217;re going to look at Bootstrap and FontAwesome today &#8211; you can really make your reports stand out with very little effort. Users genuinely appreciate the time you take to include things like icons, and thanks to FontAwesome this can be a very easy thing to do.</p>



<h3>Import Bootstrap + Dependencies</h3>



<p>First things first, you need to bring in Bootstrap. If you&#8217;re okay with having an internet requirement for your report, you can use a CDN (Content Delivery Network). For simplicity, we&#8217;ll use this approach today. If you want it to work offline, you&#8217;ll need to <a rel="noreferrer noopener" aria-label="download the frameworks (opens in a new tab)" href="https://getbootstrap.com/docs/4.3/getting-started/download/" target="_blank">download the frameworks</a> including dependencies.</p>



<p>In the &lt;head&gt; section of your webpage, add the following:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="html" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">&lt;!-- Bootstrap core CSS -->
    &lt;link href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    &lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.min.css" integrity="sha256-+N4/V/SbAFiW1MPBCXnfnP9QSN3+Keu+NlB+0ev/YKQ=" crossorigin="anonymous" /></pre>



<p>Then, before the closing &lt;/body&gt; tag, add your scripts- notice we are adding jQuery and Popper (dependencies) as well.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="html" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="true" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous">&lt;/script>
    &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous">&lt;/script>
    &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha256-WqU1JavFxSAMcLP2WIOI+GB2zWmShMI82mTpLDcqFUg=" crossorigin="anonymous">&lt;/script></pre>



<p>And that&#8217;s it! Now you&#8217;re ready to Bootstrap/FontAwesome.</p>



<h3>What is FontAwesome and how do I use it?</h3>



<p>FontAwesome is a library that provides some 1500 icons free of charge for web developers out there to use in their projects. </p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/01/image.png"><img loading="lazy" width="1024" height="555" src="http://3.88.229.156/wp-content/uploads/2020/01/image-1024x555.png" alt="" class="wp-image-417" srcset="/wp-content/uploads/2020/01/image-1024x555.png 1024w, /wp-content/uploads/2020/01/image-300x163.png 300w, /wp-content/uploads/2020/01/image-768x416.png 768w, /wp-content/uploads/2020/01/image-1536x832.png 1536w, /wp-content/uploads/2020/01/image.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<p>The easiest way to get started with FontAwesome is by using their website. You can search the icon library here and any of the icons that aren&#8217;t faded out are free to use. In the example, let&#8217;s say I decide I want to use the &#8220;tags&#8221; icon. To use it in my web app, I simply write this code:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="html" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">&lt;i class="fa fa-tags" aria-hidden="true">&lt;/i></pre>



<p>So our project now looks like this:</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/01/image-2.png"><img loading="lazy" width="1024" height="643" src="http://3.88.229.156/wp-content/uploads/2020/01/image-2-1024x643.png" alt="" class="wp-image-421" srcset="/wp-content/uploads/2020/01/image-2-1024x643.png 1024w, /wp-content/uploads/2020/01/image-2-300x188.png 300w, /wp-content/uploads/2020/01/image-2-768x482.png 768w, /wp-content/uploads/2020/01/image-2-1536x964.png 1536w, /wp-content/uploads/2020/01/image-2-2048x1286.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/01/image-3.png"><img loading="lazy" width="323" height="180" src="http://3.88.229.156/wp-content/uploads/2020/01/image-3.png" alt="" class="wp-image-422" srcset="/wp-content/uploads/2020/01/image-3.png 323w, /wp-content/uploads/2020/01/image-3-300x167.png 300w" sizes="(max-width: 323px) 100vw, 323px" /></a></figure>



<p>While we&#8217;re here. Let&#8217;s talk Bootstrap for a moment. In my code, you can see that I wrote in a custom style of &#8220;margin: 12px;&#8221; for my enclosing &lt;div&gt; element to avoid having it look like this:</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/01/image-4.png"><img loading="lazy" width="354" height="140" src="http://3.88.229.156/wp-content/uploads/2020/01/image-4.png" alt="" class="wp-image-424" srcset="/wp-content/uploads/2020/01/image-4.png 354w, /wp-content/uploads/2020/01/image-4-300x119.png 300w" sizes="(max-width: 354px) 100vw, 354px" /></a></figure>



<p>But what if there was a better way? With Bootstrap, instead of defining a manual style &#8211; which may not look the same on all devices, we can use a set of predefined classes to describe to the Bootstrap framework how we want our layout to work. I can do this using the following HTML:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="html" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">&lt;div class="mx-2 my-2">
    Well hello, FontAwesome! &lt;i class="fa fa-tags" aria-hidden="true">&lt;/i>
    &lt;/div></pre>



<p>So what&#8217;s happening here? We&#8217;re leveraging Bootstrap&#8217;s <a rel="noreferrer noopener" aria-label="spacing (opens in a new tab)" href="https://getbootstrap.com/docs/4.4/utilities/spacing/" target="_blank">spacing</a> tools, which are abbreviated for us. In this case, there are two: &#8220;mx-2&#8221;, which means Margins on the X axis (left/right sides) and Y axis (top/bottom sides) both set to 2. I could manipulate this from 0 to 5 to increase or decrease the margin as required. You can also select specific margins like &#8220;ml-3&#8221; (for Margin Left, 3) and so on. To manipulate padding, swap the M with a P &#8211; as in &#8220;px-2&#8221;.</p>



<p>To go back to FontAwesome for a moment &#8212; one thing that&#8217;s really neat about these icons is that they respond to changes via CSS. So you can easily change your icon to be whatever color (or size) you need. This is where the &#8220;font&#8221; part of FontAwesome comes in. If I change my tag icon as follows:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">&lt;i class="fa fa-tags" style='color: orange;font-size: 32px;' aria-hidden="true">&lt;/i></pre>



<p>You can see that the result is a much larger, orange icon that still looks great!</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/01/image-5.png"><img loading="lazy" width="266" height="129" src="http://3.88.229.156/wp-content/uploads/2020/01/image-5.png" alt="" class="wp-image-426"/></a></figure>



<h3>More on BootStrap</h3>



<p>Alright, so let&#8217;s dive a little bit deeper into BootStrap. Let&#8217;s try out the <a rel="noreferrer noopener" aria-label="NavBar control (opens in a new tab)" href="https://getbootstrap.com/docs/4.4/components/navbar/" target="_blank">NavBar control</a> for our page. I&#8217;m using the example directly from Bootstrap&#8217;s site here and plopping it into the HTML. Here&#8217;s my code:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="html" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">&lt;nav class="navbar navbar-expand-lg navbar-light bg-light">
        &lt;a class="navbar-brand" href="#">Fancy Report&lt;/a>
        &lt;button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
          &lt;span class="navbar-toggler-icon">&lt;/span>
        &lt;/button>
      
        &lt;div class="collapse navbar-collapse" id="navbarSupportedContent">
          &lt;ul class="navbar-nav mr-auto">
            &lt;li class="nav-item active">
              &lt;a class="nav-link" href="#">&lt;i class="fa fa-home" aria-hidden="true">&lt;/i> Home &lt;span class="sr-only">(current)&lt;/span>&lt;/a>
            &lt;/li>
            &lt;li class="nav-item dropdown">
              &lt;a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Dropdown
              &lt;/a>
              &lt;div class="dropdown-menu" aria-labelledby="navbarDropdown">
                &lt;a class="dropdown-item" href="#">Action&lt;/a>
                &lt;a class="dropdown-item" href="#">Another action&lt;/a>
                &lt;div class="dropdown-divider">&lt;/div>
                &lt;a class="dropdown-item" href="#">Something else here&lt;/a>
              &lt;/div>
            &lt;/li>
          &lt;/ul>
          &lt;form class="form-inline my-2 my-lg-0">
            &lt;input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
            &lt;button class="btn btn-outline-primary my-2 my-sm-0" type="submit">Search&lt;/button>
          &lt;/form>
        &lt;/div>
      &lt;/nav>
    &lt;div class="mx-2 my-2">
    Well hello, FontAwesome! &lt;i class="fa fa-tags" style='color: orange;font-size: 32px;' aria-hidden="true">&lt;/i>
    &lt;/div></pre>



<p>And result:</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/01/image-6.png"><img src="http://3.88.229.156/wp-content/uploads/2020/01/image-6-1024x579.png" alt="" class="wp-image-427"/></a></figure>



<p>Looking pretty good right? I wanted to also point out this NavBar is 100% responsive out of the box, so it&#8217;ll look good on Desktop and Mobile with little to no effort from you.</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/01/J2MegcwVl5.gif"><img loading="lazy" width="512" height="590" src="http://3.88.229.156/wp-content/uploads/2020/01/J2MegcwVl5.gif" alt="" class="wp-image-428"/></a></figure>



<p>One of my favourite things to do when drafting an idea for a report is to look at some UI examples made with your framework of choice. Bootstrap has <a rel="noreferrer noopener" aria-label="these examples (opens in a new tab)" href="https://getbootstrap.com/docs/4.4/examples/" target="_blank">these examples</a> or alternatively you can just peruse their excellent <a rel="noreferrer noopener" aria-label="component library docs (opens in a new tab)" href="https://getbootstrap.com/docs/4.3/components/" target="_blank">component library docs</a>.</p>



<p>This final example I&#8217;m going to show includes a few different components: cards with headers, buttons, and more from FontAwesome.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="html" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">&lt;div class="container">
          &lt;div class="row">
              &lt;div class="col-md-5">
                &lt;div class="card mt-3">
                &lt;div class="card-header h4">
                    &lt;i class="fa fa-tags" aria-hidden="true">&lt;/i> Report Contents
                &lt;/div>
                &lt;div class="card-body">
                &lt;p class="card-text">Well hello, FontAwesome and Bootstrap! &lt;/p>
                &lt;a href="#" class="btn btn-primary">&lt;i class="fa fa-search" aria-hidden="true">&lt;/i> View Details&lt;/a>
                &lt;/div>
              &lt;/div>
            &lt;/div>
        &lt;/div>
    &lt;/div></pre>



<p>And result:</p>



<figure class="wp-block-image size-large"><a href="http://3.88.229.156/wp-content/uploads/2020/01/image-8.png"><img loading="lazy" width="558" height="274" src="http://3.88.229.156/wp-content/uploads/2020/01/image-8.png" alt="" class="wp-image-435" srcset="/wp-content/uploads/2020/01/image-8.png 558w, /wp-content/uploads/2020/01/image-8-300x147.png 300w" sizes="(max-width: 558px) 100vw, 558px" /></a></figure>



<p>For more reading, I highly recommend looking through the <a rel="noreferrer noopener" aria-label="online Bootstrap docs (opens in a new tab)" href="https://getbootstrap.com/docs/4.1/getting-started/introduction/" target="_blank">online Bootstrap docs</a> further to see many awesome examples of whats possible.</p>
<p>The post <a rel="nofollow" href="/2020/01/03/spice-up-your-forensic-web-reports-with-ui-frameworks/">Spice up your forensic web reports with UI Frameworks</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2020/01/03/spice-up-your-forensic-web-reports-with-ui-frameworks/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>KnowledgeC: Now Playing entries</title>
		<link>/2019/10/07/knowledgec-now-playing-entries/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=knowledgec-now-playing-entries</link>
					<comments>/2019/10/07/knowledgec-now-playing-entries/#respond</comments>
		
		<dc:creator><![CDATA[Mike Williamson]]></dc:creator>
		<pubDate>Mon, 07 Oct 2019 18:57:12 +0000</pubDate>
				<category><![CDATA[DFIR]]></category>
		<category><![CDATA[Mobile Forensics]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[apollo]]></category>
		<category><![CDATA[iOS]]></category>
		<category><![CDATA[KnowledgeC]]></category>
		<guid isPermaLink="false">https://3.88.229.156/?p=375</guid>

					<description><![CDATA[<p>I know it&#8217;s been ages since I&#8217;ve posted! I have been settling in with Magnet Forensics and have to say &#8211; it&#8217;s been an incredible experience so far. I continue to be amazed and inspired by the dedication and skill of the folks who work tirelessly to make Magnet AXIOM and countless other products the [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2019/10/07/knowledgec-now-playing-entries/">KnowledgeC: Now Playing entries</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>I know it&#8217;s been ages since I&#8217;ve posted! I have been settling in with Magnet Forensics and have to say &#8211; it&#8217;s been an incredible experience so far. I continue to be amazed and inspired by the dedication and skill of the folks who work tirelessly to make <a rel="noreferrer noopener" aria-label="Magnet AXIOM (opens in a new tab)" href="https://www.magnetforensics.com/products/magnet-axiom/" target="_blank">Magnet AXIOM</a> and countless other products the absolute best they can be.</p>



<p>I was recently helping out a customer with a question about an iPhone he was examining. He wanted to corroborate the device owner&#8217;s story &#8212; allegedly he had watched some videos on the device at a certain date and time.</p>



<p>I suggested KnowledgeC &#8220;Now Playing&#8221; as a reference point and this led down a rabbit hole, namely:</p>



<ul><li>Does clearing Safari history impact KnowledgeC.db?</li><li>Does private browsing affect input into KnowledgeC.db?</li></ul>



<p>Answering these questions should be easy enough with the help of a jailbroken device (which I always keep near these days). I wanted to share my findings with the #DFIR community as there are some interesting things I observed along the way. Sarah Edwards herself noted in her blog series about KnowledgeC that there is more work to be done in terms of validating that the data is as it appears to be. I would say this work today follows down that path.</p>



<p>One other thing to note. My jailbroken device is running iOS 11.4.1 and at the time of writing we are at iOS 13.1.2, so there could be a difference  between this and the latest/greatest iOS version. First things first, I went into Safari and visited the first video that popped up on YouTube (do not have the YouTube app installed so it played in browser).</p>



<figure class="wp-block-image is-resized"><a href="https://cdn.shopify.com/s/files/1/2794/3840/articles/Screen_Shot_2018-05-11_at_10.48.03_AM_800x.png?v=1526061025"><img loading="lazy" src="https://cdn.shopify.com/s/files/1/2794/3840/articles/Screen_Shot_2018-05-11_at_10.48.03_AM_800x.png?v=1526061025" alt="Image result for blippi" width="278" height="278"/></a><figcaption>I had no idea what &#8216;Blippi&#8217; was until clicking the first random video that came up on YouTube.com as trending. Lesson learned.</figcaption></figure>



<p>Next, using SFTP I collected KnowledgeC.db from /private/var/mobile/Library/CoreDuet/Knowledge, including shm and wal, and opened DB Browser for SQLite. Next I ran <a rel="noreferrer noopener" aria-label="Sarah Edward's Now Playing script (opens in a new tab)" href="https://github.com/mac4n6/APOLLO/blob/master/modules/knowledge_audio_media_nowplaying.txt" target="_blank">Sarah Edwards&#8217; Now Playing script</a> (APOLLO) and here is what I observed:</p>



<figure class="wp-block-image"><a href="http://3.88.229.156/wp-content/uploads/2019/10/image.png"><img loading="lazy" width="1024" height="97" src="http://3.88.229.156/wp-content/uploads/2019/10/image-1024x97.png" alt="" class="wp-image-377" srcset="/wp-content/uploads/2019/10/image-1024x97.png 1024w, /wp-content/uploads/2019/10/image-300x28.png 300w, /wp-content/uploads/2019/10/image-768x72.png 768w, /wp-content/uploads/2019/10/image.png 2003w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<p>So far so good. I&#8217;d concur with the data here that I made it through an ad and about 3 seconds of the Blippi video before feeling immense regret end hitting the home button to stop that madness.. By the way, <em>Oct Edge Pre Roll</em> is an Ad, which at some point I skipped&#8230; but I&#8217;d say 15 seconds is conceivable for how long that all took.</p>



<p>Next, I went back to my JB device and cleared all history through Settings &gt; Safari. I then pulled KnowledgeC and ran the query again. Nothing changed- it was exactly the same as before.</p>



<p>Now things start to take a turn for the weird- I went to another video on Youtube within Safari and once again pulled my KnowledgeC db out:</p>



<figure class="wp-block-image"><a href="http://3.88.229.156/wp-content/uploads/2019/10/image-1.png"><img loading="lazy" width="1024" height="116" src="http://3.88.229.156/wp-content/uploads/2019/10/image-1-1024x116.png" alt="" class="wp-image-378" srcset="/wp-content/uploads/2019/10/image-1-1024x116.png 1024w, /wp-content/uploads/2019/10/image-1-300x34.png 300w, /wp-content/uploads/2019/10/image-1-768x87.png 768w, /wp-content/uploads/2019/10/image-1.png 2019w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<figure class="wp-block-image is-resized"><img loading="lazy" src="https://cdn.drawception.com/images/panels/2018/1-5/Z5hGZATTmp-14.png" alt="Image result for hmmm emote" width="135" height="113"/></figure>



<p>So&#8230;..the new video is missing altogether, but even more strangely there is an <strong>additional </strong>entry of Blippi (note the entry creation is about 5 minutes after the fact) stating a &#8216;Usage in Seconds&#8217; of <span style="text-decoration: underline;">319</span>.  (Note that the Usage in Seconds column is actually a computation of ZENDDATE &#8211; ZSTARTDATE that Sarah has provided for us.)</p>



<p>A few things we might surmise from this:</p>



<ul><li>Even with Safari suspended and history cleared, if I were to lock my screen I suspect it would show my &#8220;Now Playing&#8221; of the Blippi video. It wasn&#8217;t until I went to a different video that it got changed.<br></li><li>KnowledgeC writes are not guaranteed to be immediate and definitely do not on their own reflect active viewing time.</li></ul>



<p>I then watched the same video again and once again pulled my KnowledgeC. This time, I got the new entry as expected:</p>



<figure class="wp-block-image"><a href="http://3.88.229.156/wp-content/uploads/2019/10/image-2.png"><img loading="lazy" width="1024" height="156" src="http://3.88.229.156/wp-content/uploads/2019/10/image-2-1024x156.png" alt="" class="wp-image-379" srcset="/wp-content/uploads/2019/10/image-2-1024x156.png 1024w, /wp-content/uploads/2019/10/image-2-300x46.png 300w, /wp-content/uploads/2019/10/image-2-768x117.png 768w, /wp-content/uploads/2019/10/image-2.png 2016w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<p>To answer the other question, as to whether or not private browsing makes a difference with respect to KnowledgeC Now Playing records. I then visited more YouTube videos in &#8216;Private Mode&#8217; on Safari:</p>



<figure class="wp-block-image"><a href="http://3.88.229.156/wp-content/uploads/2019/10/image-3.png"><img loading="lazy" width="1024" height="200" src="http://3.88.229.156/wp-content/uploads/2019/10/image-3-1024x200.png" alt="" class="wp-image-380" srcset="/wp-content/uploads/2019/10/image-3-1024x200.png 1024w, /wp-content/uploads/2019/10/image-3-300x59.png 300w, /wp-content/uploads/2019/10/image-3-768x150.png 768w, /wp-content/uploads/2019/10/image-3.png 2027w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<p>They showed up just the same.</p>



<p>One last note. After all of this I did a KnowledgeC-wide query to see what kind of imprint I left beyond the Now Playing results:</p>



<figure class="wp-block-image"><a href="http://3.88.229.156/wp-content/uploads/2019/10/image-4.png"><img loading="lazy" width="815" height="912" src="http://3.88.229.156/wp-content/uploads/2019/10/image-4.png" alt="" class="wp-image-381" srcset="/wp-content/uploads/2019/10/image-4.png 815w, /wp-content/uploads/2019/10/image-4-268x300.png 268w, /wp-content/uploads/2019/10/image-4-768x859.png 768w" sizes="(max-width: 815px) 100vw, 815px" /></a></figure>



<p>And there you have it. I think with /app/inFocus rows it is a much clearer picture of the fact that I did not in fact spend a lot of time watching any one video. The moral of the story here is that KnowledgeC data is indeed amazing, but not without its nuances. You must build your story based on the totality of ALL relevant KnowledgeC records, and avoid dwelling solely on the information derived from a single log type or row.</p>
<p>The post <a rel="nofollow" href="/2019/10/07/knowledgec-now-playing-entries/">KnowledgeC: Now Playing entries</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2019/10/07/knowledgec-now-playing-entries/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Photo Vault app still pwnable in 2021? An adventure in iOS RE</title>
		<link>/2019/06/26/ios-photo-vault-app-still-pwnable-in-2019/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=ios-photo-vault-app-still-pwnable-in-2019</link>
					<comments>/2019/06/26/ios-photo-vault-app-still-pwnable-in-2019/#comments</comments>
		
		<dc:creator><![CDATA[Mike Williamson]]></dc:creator>
		<pubDate>Wed, 26 Jun 2019 19:40:46 +0000</pubDate>
				<category><![CDATA[InfoSec]]></category>
		<category><![CDATA[Mobile Forensics]]></category>
		<category><![CDATA[Reverse Engineering]]></category>
		<category><![CDATA[FRIDA]]></category>
		<category><![CDATA[iOS]]></category>
		<guid isPermaLink="false">https://3.88.229.156/?p=288</guid>

					<description><![CDATA[<p>Update 2021/08/22: Thanks to a tip from a reader, it was brought to my attention that PPV iOS made some pretty big changes in a recent update (early August 2021 &#8211; version 11.9). In reading the release notes, as well as doing some of my own tests, I&#8217;ve discovered some stuff and wanted to touch [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2019/06/26/ios-photo-vault-app-still-pwnable-in-2019/">Photo Vault app still pwnable in 2021? An adventure in iOS RE</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p><strong>Update 2021/08/22</strong>: Thanks to a tip from a reader, it was brought to my attention that PPV iOS made some pretty big changes in a recent update (early August 2021 &#8211; version 11.9). In reading the release notes, as well as doing some of my own tests, I&#8217;ve discovered some stuff and wanted to touch on their impact. </p>



<p><span style="text-decoration: underline;">Summary</span></p>



<ul><li>Happy to say that across the board, almost all the changes <strong>improve</strong> security for PPV users. The only source of apprehension for me is the cloud based backup which I will discuss in more detail later in the post.</li><li>Bruteforcing the PIN is still possible although the time it takes to do so has increased, due to a larger keyspace.</li><li>With some effort put into reversing, it is still possible to decrypt the media, especially if you know the PIN or have access to the decrypted keychain.</li><li>For users who were using PPV before this version, my suspicion is that the app will continue to use the old way, in order to avoid re-encrypting all media. So don&#8217;t assume if you have data from 11.9 that it will be subject to the new approach.</li></ul>



<p><span style="text-decoration: underline;">Database location has changed, and is now encrypted.</span></p>



<ul><li>The database can be found a directory up from its previous location, with the extension &#8216;.ecd&#8217; (short for Encrypted Core Data). Despite this, it is fully compatible with SQLCipher viewing tools like DB Browser for SQLCipher.</li><li>This is a solid security upgrade to PPV as previously one could glean a lot of information about what the encrypted media might be by simply looking at the database (and observing things like album titles).</li></ul>



<p><span style="text-decoration: underline;">Media items are now protected using a unique key per item.</span></p>



<ul><li>Formerly, once you had derived the &#8216;media key&#8217;, you were good to go for decrypting all data if you knew the structure of the cryptographic media container.</li><li>From a security perspective, this doesn&#8217;t change things a whole lot because of the fact that you still only need 1 key (the SQLCipher key) to get to the database. It does add extra steps though, and falls more in line with what some of the larger apps are doing (e.g. Snapchat).</li></ul>



<p><span style="text-decoration: underline;">Numeric passcodes can now be *up to* 8 digits long.</span></p>



<ul><li>This is a long overdue increase of security for the app. 4 digit numeric keyspaces, even ones with a reasonably strong KDF backing them, are pretty much always going to be susceptible to bruteforce.</li><li>The &#8216;up to&#8217; is significant as well. Instead of having a known length (4 digit) PIN (keyspace of 10^4), we now have any length from 4-8, e.g. (10^4+10^5+10^6+10^7+10^8)</li><li>Still, having any cap on the length at all seems unnecessary. Also having an option for custom alphanumeric would be nice to see.</li></ul>



<p><span style="text-decoration: underline;">There is now a &#8216;cloud backup&#8217; option available (for a fee).</span> </p>



<ul><li><strong>Full disclosure</strong>: I have not investigated this feature as of yet. These opinions are based on generalized concepts that would apply to <strong>any</strong> vault app with such a feature.</li><li>I will say that non-CloudKit (iCloud) based storage for an app like this, for me, is on its own reason enough to exercise extreme caution. This is not a reflection on PPV itself (I have no knowledge of the developer), but I have seen enough abhorrent things with other vault apps with this type of offering to default to alarm bells.</li><li>The patch notes clearly state that the separate &#8216;cloud password&#8217; is never backed up to their server, but even without the password I would have a lot of questions about how strong of a KDF is being used on the password, what are the minimum password strength requirements, etc. Imagine a scenario where their backup server gets breached, and the only thing standing between the attacker and your most sensitive media is 10,000 rounds of PBKDF2-SHA1.</li><li>Beyond outsider threats, what guarantees do we have that people affiliated with PPV aren&#8217;t going to attempt to bruteforce our data? How big is this company, how many people work there, how many of those people have access to this server and what access controls and auditing is in place to monitor that access?</li><li>The fact that a paid subscription is required means that PPV will indirectly have access to a lot more PII of their users than they otherwise would, which could be used to associate media to a specific identity.</li><li>Does PPV have the resources to respond to legal orders, such as warrants or preservation orders? It is only a matter of time before CSAM gets uploaded to their server.</li></ul>



<hr class="wp-block-separator"/>



<p><strong>Update 2020/01/29</strong>: I have since done a bit more work with this app and have found a way to bruteforce the PIN without keychain access. I also created a Python based decryptor script (instead of the C# one attached to this post). Rather than make them publicly available, please contact me and I will be happy to share the scripts with you. You can do so on the DFIR Discord or Twitter <a href="https://twitter.com/forensicmike1">@forensicmike1</a>.</p>



<hr class="wp-block-separator"/>



<p><strong>Original post</strong>: It&#8217;s been a while since I posted anything, and I suppose that&#8217;s a natural part of having a blog. I decided not to force myself to procure content and instead wait until I had something I really wanted to write about. And so here we are! In this article I&#8217;m going to talk about a process brand new to me until a few days ago. This has been an absolute blast to learn about, although I will admit it was frustrating at times.</p>



<p>This article focuses more on the outcome of my research, without dwelling too much on exactly how I got there. I am however planning a follow-up post with a whole pile of lessons learned as I think there are a lot of gotchas and overall frustrations that could very possibly be skipped.</p>



<h3><strong>Why target this app specifically?</strong></h3>



<p>com.enchantedcloud.photovault or &#8220;<a href="https://3.88.229.156/2019/06/26/ios-photo-vault-app-still-pwnable-in-2019/" target="_blank" rel="noreferrer noopener" aria-label="Private Photo Vault (opens in a new tab)">Private Photo Vault</a>&#8221; (hereafter PPV) has been the subject of security research before. In November 2015, <a rel="noreferrer noopener" aria-label="a security assessment (opens in a new tab)" href="https://ioactive.com/breaking-into-and-reverse-engineering/" target="_blank">a detailed breakdown</a> was published by Michael Allen at IOActive and he found that the app didn&#8217;t actually encrypt anything! It&#8217;s security amounted to blocking users from seeing any media inside until the passcode had been entered and this was extremely easy to defeat. I figured revisiting this same app in 2019 could be fun/interesting just to see how far it has or hasn&#8217;t come since then. </p>



<h3>Key Takeaways</h3>



<p>Whether you consider this app secure or not depends on what kind of access you&#8217;ve got to various extraction methods. For examiners with filesystem type extractions (GrayKey / Cellebrite CAS / jailbroken devices), the security of PPV <strong>is trivial to defeat</strong> and I will demonstrate how below.  For examiners obtaining logical type extractions (iTunes backup, UFED 4PC, Magnet ACQUIRE, etc.) decryption will be more challenging and further reversing work will be required. I do believe it is possible though.</p>



<p>PPV uses RNCryptor, an encryption library with implementations available in ObjectiveC, C#, JS etc. RNCryptor is <a rel="noreferrer noopener" aria-label="open source (opens in a new tab)" href="https://github.com/RNCryptor/RNCryptor-objc" target="_blank">open source</a> and we can absolutely use that to our advantage. One thing RNCryptor doesn&#8217;t manage is key storage, and the developer of PPV has apparently decided to rely on the security of the iOS Keychain to store, well, everything we need to perform decryption.</p>



<p>The master key is stored in the keychain under &#8220;ppv_DateHash&#8221;. The plaintext PIN, which is a maximum 4 digits, is also stored in the keychain as &#8220;ppv_uuidHash1&#8221;. </p>



<p>Each encrypted media file (found with its original in the app&#8217;s sandbox at /Library/PPV_Pics/) is essentially a container. The first two bytes can be safely ignored, the next 16 bytes are the IV (Initialization Vector), and the remaining bytes are the cipher text with the exception of the last 32 bytes which are related to HMAC and can safely be ignored.</p>



<p>Once generated, the master encryption key never changes even if you change your PIN. This might seem like a poor design choice, but it&#8217;s actually how your iPhone works too and it can be quite secure as long as the master key is well protected. Secure Enclave makes sure that this key never sees the light of day but this is not true for keychain data. </p>



<h3>Basic Outline of the Process / Tools Used</h3>



<ul><li>Locate and jailbreak test iOS device (I used <a rel="noreferrer noopener" href="https://coolstar.org/electra/" target="_blank">Electra root</a> for my test device, an iPhone 6S running iOS 11.2.1).<br></li><li>Installed PPV (target app) by sideloading with <a rel="noreferrer noopener" aria-label="Cydia Impactor (opens in a new tab)" href="http://www.cydiaimpactor.com/" target="_blank">Cydia Impactor</a> (app store works too).<br></li><li>Setup access over USB with <a rel="noreferrer noopener" href="https://github.com/DomT4/iTunnel" target="_blank">ITNL (iTunnel)</a>  and obtained root access to device via SSH. <br></li></ul>



<figure class="wp-block-image"><a href="http://3.88.229.156/wp-content/uploads/2019/06/itunnel_ssh.jpg"><img loading="lazy" width="1024" height="442" src="http://3.88.229.156/wp-content/uploads/2019/06/itunnel_ssh-1024x442.jpg" alt="" class="wp-image-320" srcset="/wp-content/uploads/2019/06/itunnel_ssh-1024x442.jpg 1024w, /wp-content/uploads/2019/06/itunnel_ssh-300x130.jpg 300w, /wp-content/uploads/2019/06/itunnel_ssh-768x332.jpg 768w, /wp-content/uploads/2019/06/itunnel_ssh.jpg 1060w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><figcaption>SSH tunnel over USB thanks to itnl.</figcaption></figure>



<ul><li>Installed and verified operation of <a rel="noreferrer noopener" href="https://frida.re/" target="_blank">frida-server</a> on the device &#8211; I did this using Sileo but should be doable via Cydia as well.<br></li><li>Used <a rel="noreferrer noopener" href="https://github.com/AloneMonkey/frida-ios-dump/tree/3.x" target="_blank">frida-ios-dump</a> by AloneMonkey to obtain decrypted binary of the target app (recommend Python 3.7) <br></li><li>Conducted static analysis of decrypted binary using <a rel="noreferrer noopener" href="https://www.hopperapp.com/" target="_blank">Hopper</a> . I had great success with searching for a value from the plist I believed to be  associated to crypto. This app is not free but the trial is fully functional for 15 minutes &#8211; make sure you hurry! <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /><br></li></ul>



<figure class="wp-block-image"><img loading="lazy" width="1024" height="555" src="http://3.88.229.156/wp-content/uploads/2019/06/hopperStatic-1024x555.jpg" alt="" class="wp-image-322" srcset="/wp-content/uploads/2019/06/hopperStatic-1024x555.jpg 1024w, /wp-content/uploads/2019/06/hopperStatic-300x163.jpg 300w, /wp-content/uploads/2019/06/hopperStatic-768x416.jpg 768w, /wp-content/uploads/2019/06/hopperStatic.jpg 1297w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>Static analysis using Hopper &#8211; this class looks like it might be of use!</figcaption></figure>



<ul><li>With my newly discovered knowledge I fired up Frida with this little gem:  <a rel="noreferrer noopener" href="https://codeshare.frida.re/@mrmacete/objc-method-observer/" target="_blank">ObjC Method Observer</a>, an awesome codeshare script by mrmacete (<a rel="noreferrer noopener" href="https://twitter.com/bezjaje" target="_blank">@bezjaje</a>) to snoop on iOS method invocations of a specific class on a live device. (I targetted LSLCrypt and RNCryptor classes on PPV)</li></ul>



<figure class="wp-block-image"><a href="http://3.88.229.156/wp-content/uploads/2019/06/fridaObserver.png" target="_blank" rel="noreferrer noopener"><img loading="lazy" width="1024" height="296" src="http://3.88.229.156/wp-content/uploads/2019/06/fridaObserver-1024x296.png" alt="" class="wp-image-323" srcset="/wp-content/uploads/2019/06/fridaObserver-1024x296.png 1024w, /wp-content/uploads/2019/06/fridaObserver-300x87.png 300w, /wp-content/uploads/2019/06/fridaObserver-768x222.png 768w, /wp-content/uploads/2019/06/fridaObserver.png 1171w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><figcaption>Note the test passcode of 1234 at the end of the giant SHA256 string.</figcaption></figure>



<ul><li>Switched back and forth between Hopper and Frida console until I established a good idea of what was going on. The biggest breakthrough here was that the encryption key doesn&#8217;t change when you change the passcode, and that it is stored in keychain.plist</li></ul>



<figure class="wp-block-image"><a href="http://3.88.229.156/wp-content/uploads/2019/06/pinchange_keysame.jpg"><img loading="lazy" width="1024" height="576" src="http://3.88.229.156/wp-content/uploads/2019/06/pinchange_keysame-1024x576.jpg" alt="" class="wp-image-318" srcset="/wp-content/uploads/2019/06/pinchange_keysame-1024x576.jpg 1024w, /wp-content/uploads/2019/06/pinchange_keysame-300x169.jpg 300w, /wp-content/uploads/2019/06/pinchange_keysame-768x432.jpg 768w, /wp-content/uploads/2019/06/pinchange_keysame.jpg 1273w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><figcaption>PIN change does not affect our encryption key, which conveniently gets stored in this device&#8217;s keychain.plist</figcaption></figure>



<ul><li>Studied the <a rel="noreferrer noopener" aria-label="RNCryptor-objc github repo (opens in a new tab)" href="https://github.com/RNCryptor/RNCryptor-objc" target="_blank">RNCryptor-objc github repo</a> to develop an understanding of how this AES wrapper works.<br></li><li>Develop PoC in C# using the amazing <a rel="noreferrer noopener" aria-label="LINQpad (opens in a new tab)" href="https://linqpad.net/" target="_blank">LINQpad</a> to decrypt media in PPV_Photos given the keychain.plist</li></ul>



<h3>Decryption PoC</h3>



<p>This script is C# and was written in/for <a rel="noreferrer noopener" aria-label="Linqpad (opens in a new tab)" href="https://linqpad.net/" target="_blank">Linqpad</a>, but could be adapted to a Visual Studio project very easily. It uses only native libraries. You will need to plugin your AES Key as base64 in the &#8220;USER CONFIGURATION REQUIRED&#8221; section <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f600.png" alt="ðŸ˜€" class="wp-smiley" style="height: 1em; max-height: 1em;" /> ! I call this a PoC because it does zero error checking and may or may not work for you without tweaking.</p>



<p>I might throw together a GUI app to do this more easily if people would use it. DM me on Twitter or Discord and let me know if that sounds interesting/useful.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="csharp" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">void Main()
{
	// USER CONFIGURATION REQUIRED --------------------------------->
	
		// The input directory should point to the PPV sandbox where all the encrypted media resides
		var pathToEncryptedFiles = @"c:\ppvtest\335CE0B0-..-B521433DD5D2\Library\PPV_Pics";
		
		// Where to spit out the decrypted media
		var decryptFilesTo = @"c:\ppvtest\out\";
	
		// from keychain.plist -- genp with key "ppv_dateHash"
		var aesKeyb64 = "mUAf0A6QF+DOoo...7tbZuqw2ImuRAkql0mY0zM=";

	// END USER CONFIGURATION REQUIRED !!!
	
	Directory.CreateDirectory(decryptFilesTo);

	
	// Convert to byte[] from base64 string
	var aesKey = Convert.FromBase64String(aesKeyb64);
	
	// Iterate encrypted files in the PPV_Pics folder.
	foreach (var item in Directory.GetFiles(pathToEncryptedFiles))
	{
		var inputData = File.ReadAllBytes(item);
		// The IV is located at offset 0x2 and is 16 bytes long.
		var iv = inputData.Skip(2).Take(16).ToArray();
		
		// Our header is 18 bytes (0x0 for version, 0x1 for options, and 0x2 for 16 bytes IV)
		var headerLength = 18;
		
		// The cipher text is the rest, minus 32 which is used for HMAC stuff.
		var cipherText = inputData.Skip(headerLength).Take(inputData.Length - headerLength - 32).ToArray();
		
		File.WriteAllBytes(decryptFilesTo + new FileInfo(item).Name, decryptAesCbcPkcs7(cipherText, aesKey, iv));
	}
}

// Borrowed from Rob Napier's RNCryptor-cs
// https://github.com/RNCryptor/RNCryptor-cs
private byte[] decryptAesCbcPkcs7(byte[] encrypted, byte[] key, byte[] iv)
{
	var aes = Aes.Create();
	aes.Mode = CipherMode.CBC;
	aes.Padding = PaddingMode.PKCS7;
	var decryptor = aes.CreateDecryptor(key, iv);


	byte[] plainBytes;
	using (MemoryStream msDecrypt = new MemoryStream())
	{
		using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Write))
		{
			csDecrypt.Write(encrypted, 0, encrypted.Length);
			csDecrypt.FlushFinalBlock();
			plainBytes = msDecrypt.ToArray();
		}
	}

	return plainBytes;
}</pre>



<h3>Acknowledgements</h3>



<p>I&#8217;d like to thank the following people for their assistance on this research project:</p>



<ul><li>Braden Thomas (<a rel="noreferrer noopener" aria-label="@drspringfield (opens in a new tab)" href="https://twitter.com/drspringfield" target="_blank">@drspringfield</a>) at Grayshift for his always spot-on advice and extensive depth of knowledge on all things iOS. </li><li>Ivan Rodriguez (<a rel="noreferrer noopener" aria-label="@ivRodriguezCA (opens in a new tab)" href="https://twitter.com/ivrodriguezca" target="_blank">@ivRodriguezCA</a>) for <a rel="noreferrer noopener" aria-label="his excellent blog (opens in a new tab)" href="https://ivrodriguez.com/reverse-engineer-ios-apps-ios-11-edition-part2/" target="_blank">his excellent blog</a> and great advice. </li><li>@karate on DFIR Discord (Magnus RC3 Sweden) (<a href="https://twitter.com/may_pol17" target="_blank" rel="noreferrer noopener" aria-label="@may_pol17 (opens in a new tab)">@may_pol17</a>) for his excellent guidance and urging to get Frida working.</li><li>Or Begam (<a rel="noreferrer noopener" aria-label="@shloophen (opens in a new tab)" href="https://twitter.com/shloophen" target="_blank">@shloophen</a>) from Cellebrite for reviewing my decryption PoC and spotting that final bug, connecting me with Ivan Rodriguez and generally being awesome.</li></ul>
<p>The post <a rel="nofollow" href="/2019/06/26/ios-photo-vault-app-still-pwnable-in-2019/">Photo Vault app still pwnable in 2021? An adventure in iOS RE</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2019/06/26/ios-photo-vault-app-still-pwnable-in-2019/feed/</wfw:commentRss>
			<slash:comments>14</slash:comments>
		
		
			</item>
		<item>
		<title>A lesson in home network security</title>
		<link>/2019/05/19/a-lesson-in-home-network-security/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=a-lesson-in-home-network-security</link>
					<comments>/2019/05/19/a-lesson-in-home-network-security/#respond</comments>
		
		<dc:creator><![CDATA[Mike Williamson]]></dc:creator>
		<pubDate>Sun, 19 May 2019 21:04:09 +0000</pubDate>
				<category><![CDATA[InfoSec]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[infosec]]></category>
		<category><![CDATA[network]]></category>
		<category><![CDATA[rdp]]></category>
		<guid isPermaLink="false">https://3.88.229.156/?p=199</guid>

					<description><![CDATA[<p>There&#8217;s been a lot of buzz about RDP vulnerabilities of late, and one tweet in particular publicly shamed companies who in 2019 were still using port forwarding to remotely access machines on their corporate LANs. I thought, they&#8217;re talking about companies, not regular joes. But the tweet stuck with me and eventually motivated me to [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2019/05/19/a-lesson-in-home-network-security/">A lesson in home network security</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>There&#8217;s been a lot of buzz about <a rel="noreferrer noopener" aria-label="RDP vulnerabilities (opens in a new tab)" href="https://blogs.technet.microsoft.com/msrc/2019/05/14/prevent-a-worm-by-updating-remote-desktop-services-cve-2019-0708/" target="_blank">RDP vulnerabilities</a> of late, and one tweet in particular publicly shamed companies who in 2019 were still using port forwarding to remotely access machines on their corporate LANs. I thought, they&#8217;re talking about <em>companies, </em>not regular joes. But the tweet stuck with me and eventually motivated me to take a small step towards improved security. I&#8217;ll admit it! I&#8217;ve had a random (non-3389) port forwarded to a machine on my LAN to facilitate RDP connections for some time, really just for the sheer convenience and cost effectiveness of it. I selected a port that isn&#8217;t commonly used for anything, to help prevent it from showing up on Shodan or any common-only type port scans. It gave me a &#8216;security through obscurity&#8217; level of confidence that others probably share about their home LANs. I googled easy ways to improve RDP security and came across <a rel="noreferrer noopener" aria-label="this guide (opens in a new tab)" href="https://www.tenforums.com/tutorials/87609-change-account-lockout-threshold-local-accounts-windows-10-a.html" target="_blank">this guide</a> which walks you through how to set local policy that automatically locks accounts out after so many failed login attempts. I went ahead and set this up on the box I RDP to. On that box, I had only 1 <strong>local</strong> account which was part of the Administrator group. Today, I went to login to the machine and got this (image from Google images):</p>



<figure class="wp-block-image"><a href="http://3.88.229.156/wp-content/uploads/2019/05/AD_Account_Keeps_Locking_Out.jpg"><img loading="lazy" width="474" height="205" src="http://3.88.229.156/wp-content/uploads/2019/05/AD_Account_Keeps_Locking_Out.jpg" alt="" class="wp-image-200" srcset="/wp-content/uploads/2019/05/AD_Account_Keeps_Locking_Out.jpg 474w, /wp-content/uploads/2019/05/AD_Account_Keeps_Locking_Out-300x130.jpg 300w" sizes="(max-width: 474px) 100vw, 474px" /></a></figure>



<p>OK, I thought, there could be a non-scary explanation for this &#8212; maybe a scheduled task I created with stored credentials and completely forgot about or something? </p>



<p class="has-small-font-size"><em>Side note &#8212; when you are literally the only user that can login on a machine and get locked out, it&#8217;s a pain in the ass to fix! The login screen won&#8217;t let you login as any other user and even password resets do not unlock it. I booted to recovery and launched a command prompt, but wasn&#8217;t able to see my locked out account from there using net user &#8212; it listed other accounts but not the problem one.</em> <em>The fix I finally used was to replace utilman.exe with cmd.exe in the recovery command prompt and boot normally</em>, <em>then clicked the &#8216;ease of access&#8217; to have an administrator command prompt on a normal boot</em>, <em>which was able to set the user account to active again.</em></p>



<p>Alright so, we&#8217;re unlocked now and all is back to normal, right? As a forensics guy I really wanted to discover what caused the lockout. I opened up Event viewer and checked out the Security logs. What I observed next stunned me. In the 12 days before all this happened, I had over 14,000 failed attempts to logon via RDP. Further inspection showed that the failed attempts were often coupled with random account names that could only be part of a dictionary attack. I exported the list and wrote a C# script to itemize the names used, and put them in a pastebin <a rel="noreferrer noopener" aria-label="here (opens in a new tab)" href="https://pastebin.com/S64qNi7V" target="_blank">here</a> if anyone is interested. ADMINISTRATOR is the clear winner with over 9611 failed logins.</p>



<p>This led me on a &#8216;security improvement&#8217; rabbit hole that included:</p>



<ul><li>Disabling port forwarding altogether on my router</li><li>Running nmap on my machine and finding ports open somehow.</li><li>Discovering that UPnP was enabled on my router and disabling it &#8211; really?</li><li>Going through the ASUS Security Checklist and turning everything green, such as changing my &#8216;admin&#8217; username to something else, disabling WPS, enabling HTTPS-only access to the router, updating router firmware to the latest version, etc.</li></ul>



<p>While there&#8217;s no evidence at this point of successful access to my machine, I felt like this was an excellent wakeup call. As for remoting, I am going to disable RDP and instead use a third party remoting service &#8212; one which allows me to use 2FA and has &#8216;login attempt from X.X.X.X&#8217; notification emails, etc.</p>
<p>The post <a rel="nofollow" href="/2019/05/19/a-lesson-in-home-network-security/">A lesson in home network security</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2019/05/19/a-lesson-in-home-network-security/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Obtain a logical dump of Signal data on Android with signal-back</title>
		<link>/2019/05/15/obtain-logical-signal-android/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=obtain-logical-signal-android</link>
					<comments>/2019/05/15/obtain-logical-signal-android/#comments</comments>
		
		<dc:creator><![CDATA[Mike Williamson]]></dc:creator>
		<pubDate>Wed, 15 May 2019 20:11:38 +0000</pubDate>
				<category><![CDATA[Mobile Forensics]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[android]]></category>
		<category><![CDATA[signal]]></category>
		<guid isPermaLink="false">https://3.88.229.156/?p=173</guid>

					<description><![CDATA[<p>I&#8217;ve had a number of people asking for a walkthrough on this process so thought I&#8217;d make it into this week&#8217;s blog entry. It&#8217;s not a particularly technical process and I&#8217;m the first to admit doesn&#8217;t adhere to strict forensic fundamentals either. I recognize this and agree! This approach is certainly one of the last [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2019/05/15/obtain-logical-signal-android/">Obtain a logical dump of Signal data on Android with signal-back</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>I&#8217;ve had a number of people asking for a walkthrough on this process so thought I&#8217;d make it into this week&#8217;s blog entry. It&#8217;s not a particularly technical process and I&#8217;m the first to admit doesn&#8217;t adhere to strict forensic fundamentals either. I recognize this and agree! This approach is certainly one of the last things to do on an Android device &#8211; once you&#8217;ve completed all other acquisition techniques &#8211; including potentially taking photos of the screen. You should also consider any potential repercussions of manipulating the device directly and be willing to speak to this down the road otherwise don&#8217;t do it! </p>



<p>We&#8217;ve slowly been forced to make concessions as forensic examiners as the technology evolves and with it, an increased difficulty in obtaining that pristine unaltered dataset we get with a write-blocked mechanical hard drive. As long as you&#8217;ve followed sound forensic processes and obtained as much data as possible without making any changes, I think it&#8217;s a great ability to possess &#8212; being able to export Signal data this way &#8212; given time is not always abundant and message data can be unpredictably supermassive. We&#8217;ve all had the experience of having to capture screen photos one by one, and let&#8217;s face it &#8211; it sucks. Worse, the data you get from screen photos is often less precise&#8230; perhaps times are rounded to the nearest minute, relative to the time of the moment it is being viewed, or not visible at all.</p>



<h3>Enough with the disclaimer, where do we start?</h3>



<p>First, remove any SD card in the device, place it in a bag or tape it to something with a label, and set it aside. Locate a blank SD card. We&#8217;ll use this temporary SD card to transfer off our backup data once it is prepared. I generally wait to insert the SD card until after the backup has been created.</p>



<p>Open the Signal application on the device. Go to settings via the &#8216;&#8230;&#8217; button at the top right of the home screen. From here look for &#8216;Chats and Media&#8217; and tap on that.</p>



<figure class="wp-block-image is-resized"><a href="http://3.88.229.156/wp-content/uploads/2019/05/1-2.png"><img loading="lazy" src="http://3.88.229.156/wp-content/uploads/2019/05/1-2.png" alt="" class="wp-image-174" width="180" height="263" srcset="/wp-content/uploads/2019/05/1-2.png 652w, /wp-content/uploads/2019/05/1-2-205x300.png 205w" sizes="(max-width: 180px) 100vw, 180px" /></a></figure>



<p>On the next screen, click the slider switch to enable Chat Backups. If it is already enabled, switch it off and back on. A new password is generated each time. <em>NOTE: You may wish to turn this OFF after completing an extraction.</em></p>



<figure class="wp-block-image is-resized"><a href="http://3.88.229.156/wp-content/uploads/2019/05/2-1.png"><img loading="lazy" src="http://3.88.229.156/wp-content/uploads/2019/05/2-1.png" alt="" class="wp-image-175" width="239" height="230" srcset="/wp-content/uploads/2019/05/2-1.png 936w, /wp-content/uploads/2019/05/2-1-300x290.png 300w, /wp-content/uploads/2019/05/2-1-768x743.png 768w" sizes="(max-width: 239px) 100vw, 239px" /></a></figure>



<p>Enabling the slider switch will trigger a dialog with a numeric password on it. The passphrase is read from left to right, row by row, as if there were no spaces in it. Check the box. <strong>HIGHLY RECOMMEND TAKING A PHOTO</strong> vs. writing it down.</p>



<figure class="wp-block-image is-resized"><a href="http://3.88.229.156/wp-content/uploads/2019/05/3-1.png"><img loading="lazy" src="http://3.88.229.156/wp-content/uploads/2019/05/3-1.png" alt="" class="wp-image-176" width="261" height="261" srcset="/wp-content/uploads/2019/05/3-1.png 970w, /wp-content/uploads/2019/05/3-1-150x150.png 150w, /wp-content/uploads/2019/05/3-1-768x772.png 768w" sizes="(max-width: 261px) 100vw, 261px" /></a></figure>



<p>After the program has run, the original screen will update with a new last backup date. Go back to the Home screen and locate File Manager app. On the device root (not the SD card), locate the folder called Signal. It will be empty aside from your newly generated backup. Now put in your blank SD card. Assuming all goes well and it gets mounted, long hold on the Signal folder and then chose &#8216;Move To&#8217; from the context menu. </p>



<figure class="wp-block-image is-resized"><a href="http://3.88.229.156/wp-content/uploads/2019/05/4-1.png"><img loading="lazy" src="http://3.88.229.156/wp-content/uploads/2019/05/4-1.png" alt="" class="wp-image-178" width="216" height="242" srcset="/wp-content/uploads/2019/05/4-1.png 797w, /wp-content/uploads/2019/05/4-1-267x300.png 267w, /wp-content/uploads/2019/05/4-1-768x861.png 768w" sizes="(max-width: 216px) 100vw, 216px" /></a></figure>



<figure class="wp-block-image is-resized"><a href="http://3.88.229.156/wp-content/uploads/2019/05/6-1.png"><img loading="lazy" src="http://3.88.229.156/wp-content/uploads/2019/05/6-1-874x1024.png" alt="" class="wp-image-179" width="205" height="239" srcset="/wp-content/uploads/2019/05/6-1-874x1024.png 874w, /wp-content/uploads/2019/05/6-1-256x300.png 256w, /wp-content/uploads/2019/05/6-1-768x900.png 768w, /wp-content/uploads/2019/05/6-1.png 908w" sizes="(max-width: 205px) 100vw, 205px" /></a></figure>



<p>I usually choose to <em>move</em> it to the blank SD card, so it isn&#8217;t left behind on the device. Transfer this to your examination machine and copy it out. If you were to look at this in hex, you&#8217;ll see what you expected to see &#8211; an encrypted container file.</p>



<figure class="wp-block-image is-resized"><a href="http://3.88.229.156/wp-content/uploads/2019/05/hxd.png"><img loading="lazy" src="http://3.88.229.156/wp-content/uploads/2019/05/hxd.png" alt="" class="wp-image-180" width="342" height="495" srcset="/wp-content/uploads/2019/05/hxd.png 634w, /wp-content/uploads/2019/05/hxd-207x300.png 207w" sizes="(max-width: 342px) 100vw, 342px" /></a></figure>



<p>Now we need to use signal-back. This app is written in Go, and open source,  but has been conveniently bundled into an executable that you can download off it&#8217;s Github page at <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://github.com/xeals/signal-back" target="_blank">xeals/signal-back</a>. I&#8217;ve got this executable in a folder that&#8217;s in my PATH environment variable but you could copy it into the casefolder if you like. The command syntax is:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="msdos" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">signal-back.exe format signal-2019-01-01-01-30-22.backup > signalMessages.xml</pre>



<p>After this you will be prompted for the password which is not echoed to the screen. If you get a long error or anything to do with a parsing error you may have a password issue &#8211; try again. Alternatively if everything was successful you now have an XML file that is compatible with SMS Backup and Restore.</p>



<figure class="wp-block-image"><a href="http://3.88.229.156/wp-content/uploads/2019/05/notepad.png"><img loading="lazy" width="1024" height="600" src="http://3.88.229.156/wp-content/uploads/2019/05/notepad-1024x600.png" alt="" class="wp-image-181" srcset="/wp-content/uploads/2019/05/notepad-1024x600.png 1024w, /wp-content/uploads/2019/05/notepad-300x176.png 300w, /wp-content/uploads/2019/05/notepad-768x450.png 768w, /wp-content/uploads/2019/05/notepad.png 1455w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></figure>



<p>Throw this data into a compatible tool and presto! Signal data! One last note, contact names aren&#8217;t present in the XML. I don&#8217;t know if the Signal backup database includes it or not, but the way I deal with this is by exporting all Native contacts using a forensic tool and apply it to the XML based on phone numbers. You could also do this manually. </p>



<figure class="wp-block-image is-resized"><a href="http://3.88.229.156/wp-content/uploads/2019/05/7-1.png"><img loading="lazy" src="http://3.88.229.156/wp-content/uploads/2019/05/7-1.png" alt="" class="wp-image-182" width="206" height="344" srcset="/wp-content/uploads/2019/05/7-1.png 544w, /wp-content/uploads/2019/05/7-1-180x300.png 180w" sizes="(max-width: 206px) 100vw, 206px" /></a></figure>
<p>The post <a rel="nofollow" href="/2019/05/15/obtain-logical-signal-android/">Obtain a logical dump of Signal data on Android with signal-back</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2019/05/15/obtain-logical-signal-android/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>forensicBlend: Designing a scalable community plugin API</title>
		<link>/2019/05/11/forensicblend-designing-a-scalable-community-plugin-api/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=forensicblend-designing-a-scalable-community-plugin-api</link>
					<comments>/2019/05/11/forensicblend-designing-a-scalable-community-plugin-api/#respond</comments>
		
		<dc:creator><![CDATA[Mike Williamson]]></dc:creator>
		<pubDate>Sat, 11 May 2019 14:09:10 +0000</pubDate>
				<category><![CDATA[Forensic Coding]]></category>
		<category><![CDATA[Mobile Forensics]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<category><![CDATA[.NET]]></category>
		<category><![CDATA[AWS]]></category>
		<category><![CDATA[c#]]></category>
		<category><![CDATA[forensicBlend]]></category>
		<guid isPermaLink="false">https://3.88.229.156/?p=149</guid>

					<description><![CDATA[<p>I decided to start writing this series to document my work on forensicBlend, a project I previewed on Twitter yesterday that takes device logs and translates them into a modern report format that can be searched, filtered, and exported. One of my fundamental design goals is to provide a high level of extensibility and allow [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2019/05/11/forensicblend-designing-a-scalable-community-plugin-api/">forensicBlend: Designing a scalable community plugin API</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>I decided to start writing this series to document my work on forensicBlend, a project I <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://twitter.com/forensicmike1/status/1126989265420730368?s=20" target="_blank">previewed on Twitter yesterday</a> that takes device logs and translates them into a modern report format that can be searched, filtered, and exported. One of my fundamental design goals is to provide a high level of extensibility and allow community developers to contribute. That is, I want for people who know how to script to be able to contribute their own custom logic and see it work in my apps (and ultimately, result in a better timeline tool). This is something <a rel="noreferrer noopener" aria-label="Eric Zimmerman (opens in a new tab)" href="https://ericzimmerman.github.io/#!index.md" target="_blank">Eric Zimmerman</a> touched on <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://3.88.229.156/2019/05/06/chatting-net-with-eric-zimmerman/" target="_blank">in our interview</a> last week.</p>



<figure class="wp-block-image"><a href="http://3.88.229.156/wp-content/uploads/2019/05/1-1.png"><img loading="lazy" width="1000" height="650" src="http://3.88.229.156/wp-content/uploads/2019/05/1-1.png" alt="" class="wp-image-150" srcset="/wp-content/uploads/2019/05/1-1.png 1000w, /wp-content/uploads/2019/05/1-1-300x195.png 300w, /wp-content/uploads/2019/05/1-1-768x499.png 768w" sizes="(max-width: 1000px) 100vw, 1000px" /></a></figure>



<p>I scaffolded some of the UX (above) based roughly on how I want this to work. Essentially- list the currently installed plugins, prompt for updates where available, and provide a way to browse the online repository to download additional plugins.</p>



<p><em>Side note</em>:<em> I&#8217;ve had some questions regarding what UI framework I am using. The above is a WPF app which uses the excellent <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://github.com/MahApps/MahApps.Metro" target="_blank">MahApps.Metro</a> and <a href="https://github.com/MaterialDesignInXAML/MaterialDesignInXamlToolkit" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">Material Design in XAML</a> libraries. These are </em><u><em>free</em></u><em> offerings that you can use in your own WPF project to elevate your UI to the next level.</em></p>



<h3><u>Requirements</u></h3>



<p>There are really two areas of work here to think about: the plugin API itself (what to do with the packages once they are installed), and package hosting/redistribution. Here are a few overall design considerations and requirements I came up with:</p>



<ul><li>As a lone developer, time and cost savings are a priority. If there are any wheels that have already been invented, don&#8217;t invent new ones unless the need be great.</li><li>It&#8217;s 2019 and it&#8217;s therefore important we take time to consider things like security. Packages containing plugins may have DLLs (more on this later) with code that will ultimately be executed by our app. This could (and should) be considered a potential attack surface.  We can mitigate this with some of the following:<ul><li>Packages should be signed and verified at every step of the way.</li><li>Community created plugins and updates will undergo a thorough, manual code review and testing before they are posted to the package library (think Apple&#8217;s App Store).</li></ul></li><li>Plugin packages should have versioning capabilities and upgrading to the latest version should be as seamless as possible, being cognizant that not all users will have internet access.</li><li>Community created plugins will be managed centrally and approved prior to being posted to the online package library (think Apple App Store).</li></ul>



<h3><u>Hosting and Package Distribution</u></h3>



<p>I knew going into a project like this that I wanted to use Amazon AWS. The cost effectiveness, sheer scalability, and all-around cool factor of using AWS made this an easy design decision. Off the top of my head, I expect to be using the following AWS components:</p>



<ul><li>API Gateway <ul><li>Create and administer web endpoints for the app.</li></ul></li><li>Certificate Manager<ul><li>Free SSL certificate!</li></ul></li><li>CloudFront<ul><li>Content Delivery Network (CDN) to ensure low latency, high speed access to data from anywhere in the world</li></ul></li><li>Cognito<ul><li>Complete User Account Management and Authentication</li></ul></li><li>EC2 (Elastic Compute Cloud)<ul><li>Host microinstance of some sort of RDBMS. Or perhaps we will try out a NoSQL solution DynamoDB for science / learning &#8212; and because DynamoDB has a permanent free tier option.</li></ul></li><li>Elastic Load Balancing<ul><li>Distribute incoming application traffic across multiple targets across several Availability zones.</li></ul></li><li>Lambda<ul><li>Provide the business logic for serving our REST API to answer questions like &#8220;What are all the plugins currently available and what is the latest version?&#8221;</li><li>Provide the business logic for facilitating and monitoring package downloads (users like to see download counts), potentially provide a &#8216;thumbs up / thumbs down&#8217; interaction or possibly even comment</li></ul></li><li>Route 53<ul><li>DNS Registration</li></ul></li><li>S3<ul><li>Secure, encrypted, redundant hosting of the compiled packages themselves</li><li>Web front-end for users who choose to browse it this way.</li></ul></li></ul>



<p>Let&#8217;s keep in mind I&#8217;ve touched on less than 10 of the things AWS can do for you, whereas the actual list of things it can do is much, much longer. For most of us, the usage involved will be in or around the Free Tier, so basically what I&#8217;m saying is you can get all of the things above for NO COST. If you are reading this and going, &#8220;Why am I still renting web space like I did in 2005?&#8221; this is an excellent question. You may wanna migrate! There is also an irreplaceable feeling you get when you realize you are using the same exact same serverless environment as some of the largest of corporate juggernauts out there. </p>



<h3><u>Packaging Technologies</u></h3>



<p>Earlier I mentioned leveraging as many existing technologies as possible. Most every .NET programmer out there is familiar with the idea of <a href="https://www.nuget.org/" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)">NuGet</a>. From NuGet themselves:  </p>



<p style="text-align:right"><em>NuGet is the package manager for .NET. The NuGet client tools provide the ability to produce and consume packages. The NuGet Gallery is the central package repository used by all package authors and consumers.  </em></p>



<p></p>



<p>So if I&#8217;m writing an app, and I want to bring in code from a library to perform a specific function, I can open the NuGet Package Manager in my development environment (Visual Studio shown below) and perform a search for the function I need. Then it&#8217;s one click to install and be off.</p>



<figure class="wp-block-image"><img loading="lazy" width="1024" height="562" src="http://3.88.229.156/wp-content/uploads/2019/05/nuget-1024x562.png" alt="" class="wp-image-152" srcset="/wp-content/uploads/2019/05/nuget-1024x562.png 1024w, /wp-content/uploads/2019/05/nuget-300x165.png 300w, /wp-content/uploads/2019/05/nuget-768x421.png 768w, /wp-content/uploads/2019/05/nuget.png 1320w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>It goes even further by providing strong versioning, licensing, dependency tracking, and more. Behind the scenes, NuGet uses .NUPKG files which are containers that bake alot of this functionality in for us, and provide desirable things like package signing.</p>



<p>Since NuGet already does everything we need and then some, for free, why would we design our own solution from scratch? Seeing the recurring theme here?</p>



<h3><u>Next steps</u></h3>



<p>So we know we&#8217;re going to use NuGet as a package management solution, and we know we&#8217;re going to use AWS for community hosting and package distribution, but what about the actual code to load said plugins? This could be the most entertaining part, but also the most time intensive. For the purposes of development, I will need to look at how to extract and use content from a NuGet package <u>at runtime</u>.</p>



<p>I&#8217;m going to have to weigh the advantages of dynamic code compilation (source code compilation at runtime) vs. distributing pre-compiled binaries (DLLs) and simply loading them.</p>



<p>Stay tuned for the next article in the series where we will get coding!</p>
<p>The post <a rel="nofollow" href="/2019/05/11/forensicblend-designing-a-scalable-community-plugin-api/">forensicBlend: Designing a scalable community plugin API</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2019/05/11/forensicblend-designing-a-scalable-community-plugin-api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Chatting .NET with Eric Zimmerman</title>
		<link>/2019/05/06/chatting-net-with-eric-zimmerman/?utm_source=rss&#038;utm_medium=rss&#038;utm_campaign=chatting-net-with-eric-zimmerman</link>
					<comments>/2019/05/06/chatting-net-with-eric-zimmerman/#respond</comments>
		
		<dc:creator><![CDATA[Mike Williamson]]></dc:creator>
		<pubDate>Mon, 06 May 2019 12:58:18 +0000</pubDate>
				<category><![CDATA[Forensic Coding]]></category>
		<category><![CDATA[Guest Blog]]></category>
		<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://3.88.229.156/?p=140</guid>

					<description><![CDATA[<p>I don&#8217;t think anyone in the Digital Forensics world would dispute that Python is the most used language in forensic programming today. In fact, many of its more fanatical followers frequently remind us of its ostensibly long list of superior characteristics. To the extent I think sometimes people might forget that there exists other programming [&#8230;]</p>
<p>The post <a rel="nofollow" href="/2019/05/06/chatting-net-with-eric-zimmerman/">Chatting .NET with Eric Zimmerman</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>I don&#8217;t think anyone in the Digital Forensics world would dispute that Python is the most used language in forensic programming today. In fact, many of its more fanatical followers frequently remind us of its ostensibly long list of superior characteristics. To the extent I think sometimes people might forget that there exists other programming languages at all. Recognizing this, I knew I wanted to write a post discussing one of my favorite technologies &#8212; C# and .NET as a whole &#8212; but I could think of no better guest contributor to bring into that conversation than Eric Zimmerman, one of if not <strong>the </strong>most household name in forensic coding, and and a staunch supporter of the tech.</p>



<p>Eric is the mastermind behind KAPE, Registry Explorer, JumpList Explorer, AmCacheParser, and so many more. Like many readers, I was introduced to Eric&#8217;s work early on in my forensics career &#8211; right at the beginning, in fact, as part of the curriculum of my &#8220;forensics 101&#8221; course at the Canadian Police College. I am honored to chat with him about one of my favorite subjects!</p>



<p><strong>forensicmike1: Thanks so much for taking part in this conversation Eric! I am curious to hear what brought you into the .NET world initially, and what is it thatâ€™s kept you there for all these years?</strong></p>



<p><strong>Eric Zimmerman</strong>: I initially started my development career in Access. When I outgrew that, I moved on to VB6 (way back in the pre-.NET days). Once .NET came out, I slowly switched to VB.NET because I already knew VB. I always wanted to do C#, but did not want to have to re-learn thing so I held onto it for a long time. In fact, osTriage v1 and 2 were both written in VB! Soon after osTriage v2 came out, I decided to force myself into C# for a few projects and I have never looked back from that point.</p>



<p>So for me, it is a matter of wanting to use a first class language on the platform I deal with the most, which is Windows. I am a big believer in the concept of doing Windows forensics on Windows, Mac forensics on a Mac, and so on. You are just asking for issues when you do not do things this way. For example, a very popular method for accessing volume shadow copies for Windows does not, at least in some cases, present the data for access the same way as native methods in Windows does. This leads to corrupt files being exported and obviously, that&#8217;s a problem when it comes time to process them. Does this happen all the time? No, but even once is enough that I would be hesitant to trust that method in any case that matters, unless I also verified getting the data in exactly the same way from Windows natively. At this point however, you are now doubling your work, so why bother with the non-Windows method at all?</p>



<p>I stay with .NET because it&#8217;s what I know and what works for a wide range of needs. I know it&#8217;s not going anywhere, and it has great IDEs and other resources for efficient development, debugging, logging, and so on.</p>



<p>The other huge advantage is it&#8217;s range of 3rd party controls that just do not exist anywhere else for creating amazing graphical user interfaces (GUIs). Things like grids, tree views, and a ton of other controls I use in my GUIs aren&#8217;t available so I wouldn&#8217;t be able to write something like RegistryExplorer in Python &#8212; and if I did it wouldn&#8217;t do what it can do on the Windows side.</p>



<hr class="wp-block-separator"/>



<p><strong>forensicmike1: I couldn&#8217;t agree more! And I&#8217;ve seen this happen over and over to people as they make their way to C#. Forensically speaking, can you think of any other advantages to writing code in .NET?</strong></p>



<p><strong>Eric Zimmerman</strong>:   With .NET, I know the runtime I need is going to be in place by default &#8212; or will be in the vast majority of cases. I do not have to worry about making a self-contained executable, or not handling Unicode correctly, or not being able to install something where I need it.</p>



<p>Going back to what I said earlier, I feel you should do Windows forensics on a Windows box, so this makes things a lot easier for end users of my software. With my stuff you can download and unzip my programs on any machine and it will most likely work the first time without issues. This can be on a forensics box doing dead box work, or live response stuff against a running system in the field.</p>



<p>Speed is also a big thing for me. I tend to do a lot of work to tune my code so that it is, first and foremost, as accurate as it can be. Once this is done, I tune for performance. As the old saying goes, speed is fine, but accuracy is final. When you look at forensics programs written in other languages (Rust being an exception that comes to mind), the performance is often terrible and it takes a lot of work to get the environment ready to even run an application. Sure, the developer can do some work to package a Perl or Python program into a self contained Windows executable, but that process can be painful and it still does not address the performance issues. Can performant code be written in Python? Maybe, but it involves redoing parts in Cython, or writing critical sections in C++ and so on. So while it is possible, to me it&#8217;s just not worth it, especially in light of the issues I mentioned above. Getting accurate data is of course paramount, so even one time where you might not get that accurate data is one too many to take the chance.</p>



<p>When writing forensic tools that target Windows artifacts, what Windows does and says should be the target we aim for. If you can exceed what Windows lets you see and do, all the better. Shedding light on data in a different way is always a good thing, but not at the expense of excluding or missing things (or the risk of doing so).</p>



<p>At the end of the day, I would rather my code run amazingly well on one platform, than poorly on five platforms.</p>



<hr class="wp-block-separator"/>



<p><strong>forensicmike1: Aside from not many people in forensics being familiar, can you speak to any disadvantages?</strong></p>



<p><strong>Eric Zimmerman</strong>:  The funny thing about that is, most people are using .NET all over the place every day if they use a Windows box. Just because they may not be aware of it, does not mean it isn&#8217;t there.</p>



<p>I don&#8217;t really see any disadvantages for it in the tool chains <em>I</em> <em>design and use</em>, but obviously it has been an issue in the past of being able to run .NET code on non-Windows platforms. This is becoming less and less of an issue with Microsoft becoming more involved in the open source world &#8212; remember that .NET Core is open source now &#8212; and this is furthered by being able to run PowerShell on Linux too.</p>



<p>So at some point in the not so distant future, the code I write would be cross platform (atleast the CLI ones). In some cases, the code can already run on .NET core and Standard. The big hold up for me personally in this regard is that .NET Core and Standard do not have a seamless way to make a single executable for each platform. I hate distributing 38 DLLs and the executable for programs, so until I can do this on Linux or a Mac the same way I can on Windows (i.e. giving you a single executable to run) I won&#8217;t be doing cross platform stuff full time.</p>



<p>For a lot of people, the biggest hurdle people have when it comes to using .NET is not a technical one, but rather bias towards Microsoft or Windows for some reason. Given how easy it is to stand up a VM these days, excuses like &#8220;I can&#8217;t run X because it is Windows only&#8221; just shouldn&#8217;t be a valid excuse anymore.</p>



<hr class="wp-block-separator"/>



<p><strong>forensicmike1: Do you think programming is a legitimate specialization within the field of Digital Forensics &#8212; or is it something every examiner should atleast dabble in at this point?</strong></p>



<p><strong>Eric Zimmerman</strong>: Well, I don&#8217;t know if it&#8217;s forensic programming that is a specialty, or the ability to program in a way that is necessary for use in the kinds of work we do in forensics that is more important. In other words, you do not have to be IN forensics to be able to look at programming in the way I am speaking of. What does this look like in practical terms? For me, it means failing early and often (i.e. NEVER, EVER eat error messages or other &#8220;unknown&#8221; conditions), programming defensively (i.e. protecting the end user from themselves to a degree), sanitizing input, providing the ability to see diagnostic and trace messages for debugging purposes, robust output options, and so on. (<em>Forensicmike1: This is great advice and I hope some vendors are reading!</em>)</p>



<p>Not everyone is wired to be able to program at higher levels and I am certainly no expert in the field. In fact, not even 10 years ago I started looking for a way to process LNK files natively in one of my live response programs. Looking at a LNK file in a hex editor, I said to myself &#8220;I would never be able to program something to read these things&#8221;, but now I have native parsers for just about every key Windows artifact out there &#8212; all of which I did in C#. I learned how to code and parse things partly out of necessity (they didn&#8217;t exist prior to my work) or because the existing tools did not do the job (incomplete, inaccurate, slow, etc) and I thought I could do better. Of course, curiosity and wanting to solve a problem comes into it too (I do not want to even think about how many hours I have spent looking at shellbags).</p>



<p>With that said, no one is expected to walk into DFIR and be able to write a forensic parser for an artifact on day one. In fact, most people just don&#8217;t have a reason to do so. It is certainly beneficial to have at least some level of proficiency with programming so you can whip up some code to automate the mundate though, so this is a good reason to atleast get familiar with something like PowerShell, C#, Python, etc., even if it is limited to looping over thousands of log files looking for things and saving yourself the pain of doing it manually.</p>



<hr class="wp-block-separator"/>



<p><strong>In your view are the major forensic software vendors doing enough to provide ways for established developers who do forensics as a primary job to integrate their creations? If not, any thoughts on what they could do better?</strong></p>



<p><strong>Eric Zimmerman</strong>: This is a tough one because of the different languages vendors write their programs in. Does a vendor use .NET, C++, or Delphi? Each in turn would have different ways for external users to hook into it when writing code. </p>



<p>My suggestion to vendors is to provide the ability to write plugins that can be used by the vendor&#8217;s product. X-Ways for example has an API that let&#8217;s you write such things. Several of my tools do as well (plugins in Registry tools, maps in event logs, targets and modules in KAPE).  <br><em>(Forensicmike1: Funny that the vendor that uses Delphi is also the only one who has done any .NET Plugin work!)</em> </p>



<p>The other avenue is to come up with a non-programming means (or a balance of programming and non-programming) to interact with and extend programs. Things like maps in EvtxECmd or batch file mode in RECmd are good examples here. Both allow end users to wield the capabilities of tools and extend them as far as they see fit, all without me being involved.</p>



<p>I think the biggest benefit for end users is designing open ended and extensible tools that people can then take to places the developers never thought of before. It is pretty cool to hear about some of the use cases and ways people have put my stuff to use. They find all kinds of new uses and ways to do things I never envisioned when I designed the programs.</p>



<p>By doing this, it&#8217;s not about the author of the program anymore, but rather it&#8217;s about the end-user and making their job easier, the data more clear, the work more efficient, and so on. Letting the end-user reduce the noise in order to find the signal THEY want to find is what is important.</p>



<hr class="wp-block-separator"/>



<p><strong>forensicmike1: Final word goes to you- Any advice for up-and-coming forensic coders who may be hesitant to share their work with the world?</strong></p>



<p><strong>Eric Zimmerman</strong>: Throw that code out there! Remember, there will always be a first for everything and you were not good at anything the first time you did it (or even the first 100 times!). Put that work out there, get it into people&#8217;s hands, let them play with it, make suggestions, break it, and so on.</p>



<p>Do not let anyone tell you anything in this space is a &#8220;solved problem&#8221; because the best way by far to learn about an artifact is to write a parser for it. And you never know, you may just find long standing bugs in major products that people have just taken for granted and assumed were right for the past 20 years.</p>



<p>Even if no one ever uses your code on a case, the fact that you created something from nothing is a great feeling. Seeing your code do what you intended it to do, seeing all your unit tests pass for the first time, seeing the output come out of a program you wrote from start to finish is a magical thing. It still excites me when I get into a new project.</p>



<p>Share that code, talk about that project, seek out the experts in your field to review and help and provide feedback. I cannot tell you how valuable peers are to bounce ideas off of, test things, and push my ideas to even better places. Two people (among many) that come to mind for me and have done these kinds of things hundreds of times for me over the years are David Cowen and Matt Seyer. Why are they in a position to do this? Because they too took that chance way back in the day to put out code, take a risk, be vulnerable, and EXPLORE THAT DATA in an effort to understand how it works, why it works, and the best ways to leverage that data to help us tell the story of what happened on a computer. As Matt and I like to say, &#8220;Every byte counts!&#8221;. There is a reason for them to be there. Seek to find out exactly why they are there.</p>



<p>So, in summation, my advice would be:</p>



<ul><li>Take calculated risks.</li><li>Learn from your mistakes.</li><li>Leverage peers.</li><li>Move the ball forward.</li><li>Leave things better than you found them.</li></ul>



<p style="text-align:center"><em>Follow Eric on Twitter @<a href="https://twitter.com/EricRZimmerman">EricRZimmerman</a> or visit his website at </em><a href="https://ericzimmerman.github.io/"><em>https://ericzimmerman.github.io/</em></a></p>
<p>The post <a rel="nofollow" href="/2019/05/06/chatting-net-with-eric-zimmerman/">Chatting .NET with Eric Zimmerman</a> appeared first on <a rel="nofollow" href="/">forensicmike1</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2019/05/06/chatting-net-with-eric-zimmerman/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
